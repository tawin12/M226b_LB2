var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/components/BoardComponent.html",[0,1.045,1,1.515]],["body/components/BoardComponent.html",[0,0.941,1,2.281,2,1.679,3,0.248,4,0.2,5,1.006,6,1.006,7,1.006,8,1.006,9,0.2,10,0.783,11,1.365,12,2.522,13,1.006,14,1.006,15,2.16,16,1.963,17,2.722,18,1.679,19,2.16,20,1.679,21,1.679,22,0.156,23,0.61,24,2.16,25,2.16,26,1.365,27,1.681,28,2.16,29,2.16,30,1.087,31,2.884,32,2.16,33,2.16,34,2.16,35,1.681,36,2.804,37,2.16,38,2.16,39,0.878,40,1.679,41,2.522,42,1.594,43,2.522,44,2.804,45,2.522,46,2.522,47,2.522,48,2.522,49,2.522,50,2.522,51,3.029,52,2.522,53,1.679,54,1.679,55,0.783,56,1.006,57,1.466,58,1.963,59,1.466,60,1.349,61,1.006,62,1.679,63,1.679,64,0.878,65,0.074,66,1.099,67,0.647,68,0.878,69,2.16,70,1.006,71,2.16,72,1.006,73,2.16,74,1.006,75,1.679,76,1.021,77,1.006,78,0.732,79,0.747,80,2.16,81,0.618,82,2.021,83,2.884,84,1.006,85,1.006,86,1.006,87,1.006,88,2.357,89,1.006,90,1.006,91,1.006,92,1.006,93,1.006,94,1.006,95,1.006,96,1.006,97,1.006,98,2.804,99,1.679,100,1.679,101,1.319,102,3.029,103,1.006,104,1.679,105,1.006,106,1.594,107,1.006,108,1.006,109,1.006,110,1.006,111,1.006,112,1.006,113,1.006,114,1.679,115,2.222,116,1.279,117,1.584,118,1.319,119,0.914,120,1.679,121,2.16,122,1.467,123,1.319,124,2.16,125,1.679,126,1.679,127,1.006,128,1.222,129,1.006,130,1.006,131,1.006,132,1.006,133,1.006,134,1.006,135,1.006,136,1.222,137,1.006,138,1.006,139,0.526,140,0.414,141,1.167,142,0.533,143,0.365,144,0.248,145,0.248,146,0.248,147,0.785,148,0.438,149,0.636,150,1.006,151,1.006,152,0.414,153,0.077,154,1.679,155,1.679,156,2.16,157,2.16,158,1.006,159,1.006,160,2.16,161,1.006,162,1.679,163,1.006,164,1.006,165,1.594,166,1.006,167,1.006,168,1.006,169,2.16,170,2.522,171,2.522,172,1.006,173,2.16,174,1.679,175,1.006,176,0.636,177,1.006,178,1.006,179,1.006,180,1.679,181,1.006,182,1.006,183,1.307,184,1.006,185,1.006,186,1.006,187,2.16,188,1.307,189,1.006,190,1.006,191,1.679,192,1.679,193,1.006,194,1.006,195,1.006,196,1.006,197,1.006,198,1.006,199,1.006,200,1.006,201,1.006,202,1.679,203,1.006,204,1.006,205,0.533,206,0.365,207,1.006,208,1.006,209,1.006,210,1.006,211,2.522,212,1.006,213,1.006,214,1.679,215,2.16,216,2.16,217,1.679,218,1.679,219,2.16,220,1.006,221,1.679,222,1.006,223,1.006,224,1.006,225,1.006,226,1.006,227,1.679,228,1.679,229,1.006,230,1.006,231,2.522,232,2.16,233,1.006,234,1.006,235,1.679,236,1.006,237,2.16,238,1.006,239,1.061,240,1.006,241,1.679,242,1.679,243,1.006,244,1.099,245,1.006,246,1.006,247,1.679,248,0.783,249,1.006,250,1.006,251,1.006,252,1.006,253,1.006,254,1.679,255,1.061,256,1.365,257,1.006,258,1.006,259,1.006,260,1.006,261,1.006,262,1.006,263,1.006,264,2.16,265,1.006,266,1.006,267,1.006,268,0.438,269,1.006,270,1.006,271,1.006,272,1.006,273,1.006,274,1.006,275,2.16,276,1.006,277,1.006,278,1.006,279,1.006,280,1.006,281,1.006,282,1.006,283,1.006,284,1.006,285,1.006,286,1.006,287,1.006,288,1.006,289,1.006,290,1.006,291,1.006,292,0.248,293,0.526,294,1.006,295,1.006,296,1.006,297,1.006,298,0.438,299,1.006,300,1.006,301,1.006,302,1.006,303,1.006,304,1.006,305,1.006,306,1.006,307,1.006,308,0.878,309,1.006,310,2.16,311,1.006,312,0.438,313,1.679,314,1.006,315,1.006,316,1.061,317,1.679,318,0.526,319,1.679,320,1.319,321,1.679,322,1.006,323,1.006,324,1.679,325,1.679,326,1.006,327,2.522,328,1.006,329,1.006,330,1.006,331,0.015,332,0.025,333,0.015]],["title/interfaces/ITetromino.html",[116,0.722,334,1.045]],["body/interfaces/ITetromino.html",[3,0.638,4,0.513,9,0.513,11,1.635,22,0.401,23,1.244,26,1.635,42,1.635,65,0.073,67,0.633,76,1.17,79,0.845,81,0.633,106,2.165,116,1.23,117,2.366,118,1.353,119,1.078,122,1.995,123,1.353,128,1.127,136,1.127,144,0.638,145,0.638,148,1.127,152,0.845,153,0.118,176,1.635,205,0.845,244,1.127,255,2.165,256,1.635,292,0.638,316,2.687,331,0.038,332,0.05,333,0.038,334,1.127,335,2.588,336,1.635,337,3.308,338,3.18,339,2.013,340,2.013,341,1.127,342,2.665,343,2.013,344,2.665,345,2.013,346,2.988,347,2.013,348,2.665,349,2.988,350,2.665,351,2.013,352,2.013,353,2.013,354,2.013,355,2.013,356,2.013,357,2.013,358,2.013,359,2.013,360,2.013,361,2.013,362,2.013]],["title/injectables/IsOnEdge.html",[57,1.254,363,1.045]],["body/injectables/IsOnEdge.html",[3,0.603,4,0.485,9,0.485,17,3.109,22,0.379,30,0.993,31,1.904,39,1.725,57,1.725,60,1.294,64,2.248,65,0.073,66,1.873,67,0.666,68,2.248,76,1.192,79,0.814,81,0.511,82,2.248,88,3.477,115,1.279,116,1.203,117,2.297,118,1.279,122,1.818,123,1.279,136,1.627,139,1.279,140,0.603,142,0.603,146,0.603,148,1.066,149,1.546,152,0.603,153,0.112,183,1.904,188,1.904,239,1.546,244,1.818,331,0.036,332,0.049,333,0.036,363,1.438,364,1.546,365,1.904,366,3.299,367,3.299,368,3.299,369,3.299,370,3.299,371,3.299,372,2.446,373,2.446,374,2.446,375,2.446,376,3.299,377,2.446,378,3.299,379,2.446,380,2.446,381,2.446,382,3.299,383,2.446,384,1.904,385,1.904,386,1.904,387,2.446,388,2.446,389,2.446,390,2.446,391,2.446,392,2.446,393,2.446,394,3.299,395,2.446,396,3.299,397,2.446,398,2.446,399,2.446,400,2.446,401,2.446,402,2.446,403,2.446]],["title/classes/KEYS.html",[143,0.871,153,0.11]],["body/classes/KEYS.html",[3,0.472,4,0.379,9,0.379,22,0.296,23,1.008,30,0.575,60,1.196,65,0.073,67,0.615,76,0.98,78,1.731,79,0.98,81,0.752,101,2.555,119,0.98,140,0.472,141,0.694,142,0.472,143,1.008,144,0.472,145,0.472,146,0.472,147,0.694,152,1.056,153,0.15,205,0.94,206,1.443,268,1.424,292,0.94,293,1,298,0.833,308,1,312,1.66,318,1.709,320,1.709,331,0.028,332,0.041,333,0.028,341,1.731,404,0.833,405,0.833,406,3.088,407,2.066,408,2.066,409,2.066,410,2.066,411,1.754,412,1.912,413,1.754,414,1.912,415,1.754,416,1.912,417,1.754,418,1.912,419,1.754,420,1.912,421,1.754,422,1.912,423,1,424,1,425,1,426,1,427,1,428,1,429,1,430,1.992,431,1.992,432,1.451,433,1.709,434,1.208,435,1.754,436,1.208,437,1.754,438,1.208,439,1.208,440,1.754,441,1.208,442,1.208,443,1.208,444,1.208,445,1.208,446,1.208,447,1.208,448,1.208,449,1.208,450,1.208,451,2.066,452,1.208,453,1.208,454,1.208,455,2.066,456,1.208,457,1.208,458,1.208,459,2.066,460,1.208,461,1.208,462,1.208,463,1.208,464,1.208]],["title/classes/LEVEL.html",[30,0.722,153,0.11]],["body/classes/LEVEL.html",[3,0.365,4,0.294,9,0.294,22,0.229,23,0.832,30,0.69,60,1.367,65,0.073,67,0.704,76,1.12,78,1.979,79,1.12,81,0.74,101,2.566,119,0.959,140,0.365,141,0.538,142,0.365,143,0.538,144,0.365,145,0.365,146,0.365,147,0.538,152,0.985,153,0.128,205,0.928,206,1.412,268,1.487,292,0.928,293,1.466,298,0.645,308,0.774,312,1.64,318,0.774,320,0.774,331,0.022,332,0.034,333,0.022,341,1.573,404,0.645,405,0.645,406,3.102,407,0.936,408,0.936,409,0.936,410,0.936,411,0.936,413,0.936,415,0.936,417,0.936,419,0.936,421,0.936,423,0.774,424,0.774,425,0.774,426,0.774,427,0.774,428,0.774,429,0.774,430,1.968,431,1.968,432,1.65,433,1.785,434,0.936,435,1.772,436,0.936,437,1.772,438,0.936,439,0.936,440,1.772,441,0.936,442,0.936,443,1.449,444,1.449,445,1.449,446,1.449,447,1.449,448,1.449,449,1.449,450,1.772,451,2.281,452,1.772,453,1.772,454,1.772,455,2.281,456,1.772,457,1.772,458,1.772,459,2.281,460,1.772,461,1.772,462,1.772,463,0.936,464,0.936,465,1.481,466,1.481,467,1.481,468,1.481,469,1.481,470,1.481,471,1.481,472,1.481,473,1.481,474,1.481,475,1.481,476,1.481,477,1.481,478,1.481,479,1.481,480,1.481,481,1.481,482,1.481,483,1.481,484,1.481,485,1.481]],["title/classes/PUNKTE.html",[146,0.591,153,0.11]],["body/classes/PUNKTE.html",[3,0.472,4,0.379,9,0.379,22,0.296,23,1.008,30,0.575,60,1.196,65,0.073,67,0.615,76,0.98,78,1.731,79,0.98,81,0.752,101,2.555,119,1.011,140,0.472,141,0.694,142,0.472,143,0.694,144,0.472,145,0.472,146,0.685,147,0.694,152,1.056,153,0.15,205,0.94,206,1.489,268,1.424,292,0.94,293,1,298,0.833,308,1.709,312,1.66,318,1,320,1,331,0.028,332,0.041,333,0.028,341,1.731,404,0.833,405,0.833,406,3.088,407,1.208,408,1.208,409,1.208,410,1.208,411,1.208,413,1.208,415,1.208,417,1.208,419,1.208,421,1.208,423,1,424,1,425,1,426,1,427,1,428,1,429,1,430,1.992,431,1.992,432,1.451,433,1.709,434,2.066,435,2.066,436,2.066,437,2.066,438,2.066,439,1.754,440,2.066,441,2.066,442,2.066,443,1.208,444,1.208,445,1.208,446,1.208,447,1.208,448,1.208,449,1.208,450,1.208,451,2.066,452,1.208,453,1.208,454,1.208,455,2.066,456,1.208,457,1.208,458,1.208,459,2.066,460,1.208,461,1.208,462,1.208,463,1.208,464,1.208,486,1.912,487,1.912,488,1.912,489,1.912,490,1.912,491,1.912]],["title/classes/Tetromino.html",[128,1.045,153,0.11]],["body/classes/Tetromino.html",[3,0.56,4,0.45,9,0.45,11,1.981,22,0.352,23,1.139,26,1.981,27,1.766,39,1.639,42,2.448,55,1.766,60,1.358,64,2.025,65,0.073,66,1.688,67,0.68,68,2.025,76,1.149,79,0.773,81,0.6,82,2.125,83,3.014,106,2.656,115,1.187,116,1.265,117,2.252,118,1.187,119,1.037,122,1.913,123,1.187,128,1.366,136,0.989,144,0.56,145,0.56,148,0.989,152,0.773,153,0.104,176,1.435,205,0.773,244,0.989,255,1.981,256,1.435,292,0.56,316,2.448,331,0.033,332,0.046,333,0.033,334,0.989,336,1.435,337,3.014,338,2.794,339,1.766,340,3.014,341,0.989,342,2.439,343,1.766,344,2.439,345,1.766,346,2.794,347,1.766,348,2.439,349,2.794,350,2.439,351,1.766,352,2.439,353,1.766,354,1.766,355,1.766,356,1.766,357,1.766,358,2.439,359,1.766,360,2.439,361,1.766,362,2.439,404,0.989,492,3.135,493,3.135,494,3.135,495,2.27,496,3.135,497,2.27,498,2.27,499,2.27,500,2.27,501,2.27,502,2.27,503,2.27,504,2.27]],["title/injectables/TetromisRotation.html",[59,1.254,363,1.045]],["body/injectables/TetromisRotation.html",[3,0.792,4,0.637,9,0.637,22,0.497,35,2.499,39,2.055,58,3.059,59,2.055,60,0.967,64,1.679,65,0.072,66,1.399,67,0.497,68,1.679,81,0.497,82,1.679,115,2.055,116,1.409,122,1.713,136,1.851,139,1.679,140,0.792,142,0.792,146,0.792,148,1.399,149,2.03,152,0.792,153,0.147,239,2.03,244,1.399,248,2.499,331,0.047,332,0.058,333,0.047,363,1.713,364,2.03,384,2.499,385,2.499,386,2.499,505,2.499,506,3.931,507,3.211,508,3.211,509,3.211,510,3.211,511,3.211,512,3.211,513,3.211,514,3.211]],["title/coverage.html",[515,2.533]],["body/coverage.html",[0,1.347,1,1.953,9,0.613,10,2.405,30,0.93,57,1.616,59,1.616,65,0.072,67,0.479,81,0.748,116,0.93,128,1.347,140,0.762,141,1.122,142,0.762,143,1.122,144,0.762,145,0.762,146,0.762,147,1.122,153,0.2,165,1.953,292,0.762,331,0.046,332,0.057,333,0.046,334,1.347,336,2.426,363,1.673,365,2.405,405,2.061,505,2.405,515,2.405,516,3.09,517,3.09,518,3.09,519,3.09,520,4.176,521,3.09,522,4.578,523,4.578,524,3.09,525,3.09,526,3.09,527,3.09,528,3.09]],["title/dependencies.html",[529,2.011,530,2.24]],["body/dependencies.html",[65,0.072,139,1.817,331,0.051,332,0.061,333,0.051,530,2.704,531,3.475,532,4.792,533,3.475,534,3.475,535,3.475,536,4.122,537,4.122,538,3.475,539,3.475,540,3.475,541,3.475,542,3.475,543,3.475,544,3.475,545,3.475,546,3.475,547,3.475]],["title/index.html",[22,0.311,548,2.011,549,2.011]],["body/index.html",[0,1.821,4,0.614,16,2.41,65,0.057,66,1.349,165,1.957,331,0.046,332,0.057,333,0.046,550,3.097,551,3.844,552,3.097,553,4.18,554,4.18,555,3.097,556,3.097,557,3.097,558,3.844,559,4.494,560,4.644,561,3.097,562,3.097,563,3.097,564,3.097,565,3.097,566,3.097,567,3.097,568,3.097,569,3.097,570,3.097,571,4.18,572,4.18,573,3.097,574,4.494,575,3.097,576,3.097,577,3.097,578,3.097,579,3.097,580,3.097,581,3.097,582,3.844,583,3.844,584,4.371,585,3.097,586,3.844,587,3.844,588,3.097,589,4.371,590,3.097,591,3.097,592,3.097,593,4.18,594,3.097,595,3.097,596,3.097,597,3.097,598,3.097]],["title/modules.html",[599,2.533]],["body/modules.html",[65,0.064,331,0.056,332,0.064,333,0.056,599,2.977]],["title/overview.html",[600,2.533]],["body/overview.html",[0,1.633,65,0.063,119,1.063,205,0.925,206,1.361,331,0.055,332,0.063,333,0.055,334,1.633,364,2.369,404,1.633,600,2.917]],["title/miscellaneous/variables.html",[601,1.565,602,2.24]],["body/miscellaneous/variables.html",[22,0.436,65,0.072,67,0.692,76,1.041,78,1.948,79,1.103,81,0.768,119,1.041,140,0.892,141,1.314,142,0.892,144,0.892,145,0.892,147,1.314,205,1.041,206,1.533,268,1.577,292,1.041,298,1.226,312,1.839,331,0.041,332,0.053,333,0.041,405,1.226,423,1.471,424,1.471,425,1.471,426,1.471,427,1.471,428,1.471,429,1.471,430,2.207,431,2.207,432,1.471,433,1.471,601,2.19,602,2.19,603,4.47]]],"invertedIndex":[["",{"_index":65,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":81,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.9.1",{"_index":547,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":523,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":525,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":524,"title":{},"body":{"coverage.html":{}}}],["0/22",{"_index":521,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":526,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":520,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":119,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.10.0",{"_index":545,"title":{},"body":{"dependencies.html":{}}}],["1.2",{"_index":294,"title":{},"body":{"components/BoardComponent.html":{}}}],["1.8",{"_index":301,"title":{},"body":{"components/BoardComponent.html":{}}}],["1/32",{"_index":519,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":268,"title":{},"body":{"components/BoardComponent.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":435,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["11",{"_index":452,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["12",{"_index":453,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["13",{"_index":454,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["130",{"_index":449,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["14",{"_index":456,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["15",{"_index":457,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["16",{"_index":458,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["17",{"_index":460,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["18",{"_index":461,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["19",{"_index":462,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["1px",{"_index":296,"title":{},"body":{"components/BoardComponent.html":{}}}],["2",{"_index":206,"title":{},"body":{"components/BoardComponent.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["20",{"_index":432,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"miscellaneous/variables.html":{}}}],["20ms",{"_index":464,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["220",{"_index":448,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["27",{"_index":413,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["29",{"_index":463,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["3",{"_index":292,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["30",{"_index":433,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"miscellaneous/variables.html":{}}}],["300",{"_index":437,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["32",{"_index":419,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["35",{"_index":319,"title":{},"body":{"components/BoardComponent.html":{}}}],["37",{"_index":415,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["38",{"_index":421,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["380",{"_index":447,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["39",{"_index":417,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["4",{"_index":205,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["4.4.1",{"_index":541,"title":{},"body":{"dependencies.html":{}}}],["40",{"_index":411,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["470",{"_index":446,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["5",{"_index":312,"title":{},"body":{"components/BoardComponent.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"miscellaneous/variables.html":{}}}],["50",{"_index":459,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["500",{"_index":439,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["550",{"_index":445,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["6",{"_index":430,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"miscellaneous/variables.html":{}}}],["6.4.0",{"_index":543,"title":{},"body":{"dependencies.html":{}}}],["630",{"_index":444,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["7",{"_index":431,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"miscellaneous/variables.html":{}}}],["70",{"_index":455,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["720",{"_index":443,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["8",{"_index":293,"title":{},"body":{"components/BoardComponent.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["8.2.14",{"_index":532,"title":{},"body":{"dependencies.html":{}}}],["8.3.20",{"_index":556,"title":{},"body":{"index.html":{}}}],["80",{"_index":451,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["800",{"_index":440,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["9",{"_index":450,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["abbrechen",{"_index":226,"title":{},"body":{"components/BoardComponent.html":{}}}],["abovefloor",{"_index":366,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["abovefloor(y",{"_index":372,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["abwärts",{"_index":259,"title":{},"body":{"components/BoardComponent.html":{}}}],["actual_component",{"_index":330,"title":{},"body":{"components/BoardComponent.html":{}}}],["alle",{"_index":194,"title":{},"body":{"components/BoardComponent.html":{}}}],["als",{"_index":509,"title":{},"body":{"injectables/TetromisRotation.html":{}}}],["angekommen",{"_index":284,"title":{},"body":{"components/BoardComponent.html":{}}}],["angular",{"_index":553,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":531,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":533,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":534,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":139,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{},"injectables/TetromisRotation.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":535,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":536,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":539,"title":{},"body":{"dependencies.html":{}}}],["angulartetris",{"_index":550,"title":{},"body":{"index.html":{}}}],["animate",{"_index":40,"title":{},"body":{"components/BoardComponent.html":{}}}],["animate(now",{"_index":75,"title":{},"body":{"components/BoardComponent.html":{}}}],["animation",{"_index":225,"title":{},"body":{"components/BoardComponent.html":{}}}],["animationsloop",{"_index":238,"title":{},"body":{"components/BoardComponent.html":{}}}],["app",{"_index":16,"title":{},"body":{"components/BoardComponent.html":{},"index.html":{}}}],["arguments",{"_index":70,"title":{},"body":{"components/BoardComponent.html":{}}}],["arial",{"_index":297,"title":{},"body":{"components/BoardComponent.html":{}}}],["array(cols).fill(0",{"_index":307,"title":{},"body":{"components/BoardComponent.html":{}}}],["array.from",{"_index":305,"title":{},"body":{"components/BoardComponent.html":{}}}],["artifacts",{"_index":575,"title":{},"body":{"index.html":{}}}],["aus",{"_index":190,"title":{},"body":{"components/BoardComponent.html":{}}}],["ausrechnen",{"_index":203,"title":{},"body":{"components/BoardComponent.html":{}}}],["automatically",{"_index":565,"title":{},"body":{"index.html":{}}}],["beenden",{"_index":264,"title":{},"body":{"components/BoardComponent.html":{}}}],["bei",{"_index":221,"title":{},"body":{"components/BoardComponent.html":{}}}],["bewegt",{"_index":392,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["bewegung",{"_index":260,"title":{},"body":{"components/BoardComponent.html":{}}}],["black",{"_index":290,"title":{},"body":{"components/BoardComponent.html":{}}}],["block",{"_index":188,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{}}}],["block_size",{"_index":141,"title":{},"body":{"components/BoardComponent.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["blue",{"_index":425,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"miscellaneous/variables.html":{}}}],["blöcke",{"_index":248,"title":{},"body":{"components/BoardComponent.html":{},"injectables/TetromisRotation.html":{}}}],["blöcken",{"_index":202,"title":{},"body":{"components/BoardComponent.html":{}}}],["board",{"_index":17,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{}}}],["board.component.css",{"_index":19,"title":{},"body":{"components/BoardComponent.html":{}}}],["board.component.html",{"_index":21,"title":{},"body":{"components/BoardComponent.html":{}}}],["boardcomponent",{"_index":1,"title":{"components/BoardComponent.html":{}},"body":{"components/BoardComponent.html":{},"coverage.html":{}}}],["boardes",{"_index":253,"title":{},"body":{"components/BoardComponent.html":{}}}],["boolean",{"_index":88,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{}}}],["bootstrap",{"_index":540,"title":{},"body":{"dependencies.html":{}}}],["border",{"_index":313,"title":{},"body":{"components/BoardComponent.html":{}}}],["browser",{"_index":537,"title":{},"body":{"dependencies.html":{}}}],["build",{"_index":574,"title":{},"body":{"index.html":{}}}],["button",{"_index":209,"title":{},"body":{"components/BoardComponent.html":{}}}],["cancelanimationframe(this.requestid",{"_index":228,"title":{},"body":{"components/BoardComponent.html":{}}}],["canvas",{"_index":24,"title":{},"body":{"components/BoardComponent.html":{}}}],["canvasnext",{"_index":25,"title":{},"body":{"components/BoardComponent.html":{}}}],["canvasrenderingcontext2d",{"_index":106,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["change",{"_index":567,"title":{},"body":{"index.html":{}}}],["check",{"_index":596,"title":{},"body":{"index.html":{}}}],["class",{"_index":153,"title":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{}},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{},"coverage.html":{}}}],["classes",{"_index":404,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"overview.html":{}}}],["clearlines",{"_index":41,"title":{},"body":{"components/BoardComponent.html":{}}}],["cli",{"_index":554,"title":{},"body":{"index.html":{}}}],["code",{"_index":569,"title":{},"body":{"index.html":{}}}],["color",{"_index":316,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["cols",{"_index":140,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"injectables/TetromisRotation.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["column",{"_index":321,"title":{},"body":{"components/BoardComponent.html":{}}}],["component",{"_index":0,"title":{"components/BoardComponent.html":{}},"body":{"components/BoardComponent.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["component_template",{"_index":328,"title":{},"body":{"components/BoardComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/BoardComponent.html":{}}}],["const",{"_index":341,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{}}}],["constants",{"_index":148,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{}}}],["constructor",{"_index":55,"title":{},"body":{"components/BoardComponent.html":{},"classes/Tetromino.html":{}}}],["constructor(ctx",{"_index":495,"title":{},"body":{"classes/Tetromino.html":{}}}],["constructor(edge",{"_index":56,"title":{},"body":{"components/BoardComponent.html":{}}}],["constructor(private",{"_index":176,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["coverage",{"_index":515,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["creates",{"_index":62,"title":{},"body":{"components/BoardComponent.html":{}}}],["ctx",{"_index":26,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["ctxnext",{"_index":27,"title":{},"body":{"components/BoardComponent.html":{},"classes/Tetromino.html":{}}}],["ctxnext.canvas.height",{"_index":355,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["ctxnext.canvas.width",{"_index":354,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["ctxnext.clearrect(0",{"_index":353,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["ctxnext.fillrect(x",{"_index":357,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["ctxnext.fillstyle",{"_index":356,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["cyan",{"_index":424,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"miscellaneous/variables.html":{}}}],["dach",{"_index":266,"title":{},"body":{"components/BoardComponent.html":{}}}],["das",{"_index":183,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{}}}],["dass",{"_index":511,"title":{},"body":{"injectables/TetromisRotation.html":{}}}],["decorators",{"_index":99,"title":{},"body":{"components/BoardComponent.html":{}}}],["default",{"_index":78,"title":{},"body":{"components/BoardComponent.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":60,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{}}}],["den",{"_index":274,"title":{},"body":{"components/BoardComponent.html":{}}}],["dependencies",{"_index":530,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["der",{"_index":239,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{},"injectables/TetromisRotation.html":{}}}],["des",{"_index":252,"title":{},"body":{"components/BoardComponent.html":{}}}],["dev",{"_index":562,"title":{},"body":{"index.html":{}}}],["development",{"_index":557,"title":{},"body":{"index.html":{}}}],["die",{"_index":187,"title":{},"body":{"components/BoardComponent.html":{}}}],["directive",{"_index":326,"title":{},"body":{"components/BoardComponent.html":{}}}],["directives",{"_index":329,"title":{},"body":{"components/BoardComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":573,"title":{},"body":{"index.html":{}}}],["directory",{"_index":578,"title":{},"body":{"index.html":{}}}],["dist",{"_index":577,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":516,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":7,"title":{},"body":{"components/BoardComponent.html":{}}}],["double",{"_index":436,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["down",{"_index":407,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["draw",{"_index":42,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["drawboard",{"_index":43,"title":{},"body":{"components/BoardComponent.html":{}}}],["drawnext",{"_index":492,"title":{},"body":{"classes/Tetromino.html":{}}}],["drawnext(ctxnext",{"_index":352,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["drop",{"_index":44,"title":{},"body":{"components/BoardComponent.html":{}}}],["dropbewegung",{"_index":240,"title":{},"body":{"components/BoardComponent.html":{}}}],["dx",{"_index":396,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["dy",{"_index":394,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["dynamic",{"_index":538,"title":{},"body":{"dependencies.html":{}}}],["e2e",{"_index":590,"title":{},"body":{"index.html":{}}}],["edge",{"_index":69,"title":{},"body":{"components/BoardComponent.html":{}}}],["edge.service",{"_index":150,"title":{},"body":{"components/BoardComponent.html":{}}}],["einander",{"_index":270,"title":{},"body":{"components/BoardComponent.html":{}}}],["einem",{"_index":389,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["einer",{"_index":402,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["einfrieren",{"_index":281,"title":{},"body":{"components/BoardComponent.html":{}}}],["elapsed",{"_index":155,"title":{},"body":{"components/BoardComponent.html":{}}}],["element",{"_index":325,"title":{},"body":{"components/BoardComponent.html":{}}}],["elementref",{"_index":98,"title":{},"body":{"components/BoardComponent.html":{}}}],["end",{"_index":589,"title":{},"body":{"index.html":{}}}],["erhöhen",{"_index":276,"title":{},"body":{"components/BoardComponent.html":{}}}],["ermöglicht",{"_index":508,"title":{},"body":{"injectables/TetromisRotation.html":{}}}],["erreicht",{"_index":267,"title":{},"body":{"components/BoardComponent.html":{}}}],["erstellen",{"_index":304,"title":{},"body":{"components/BoardComponent.html":{}}}],["esc",{"_index":408,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["event",{"_index":71,"title":{},"body":{"components/BoardComponent.html":{}}}],["event.keycode",{"_index":160,"title":{},"body":{"components/BoardComponent.html":{}}}],["event.preventdefault",{"_index":164,"title":{},"body":{"components/BoardComponent.html":{}}}],["example",{"_index":13,"title":{},"body":{"components/BoardComponent.html":{}}}],["execute",{"_index":586,"title":{},"body":{"index.html":{}}}],["export",{"_index":152,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{}}}],["falls",{"_index":265,"title":{},"body":{"components/BoardComponent.html":{}}}],["false",{"_index":237,"title":{},"body":{"components/BoardComponent.html":{}}}],["farben",{"_index":144,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["farben[typeid",{"_index":347,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["farben[value",{"_index":257,"title":{},"body":{"components/BoardComponent.html":{}}}],["file",{"_index":9,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{},"coverage.html":{}}}],["files",{"_index":568,"title":{},"body":{"index.html":{}}}],["flag",{"_index":580,"title":{},"body":{"index.html":{}}}],["float",{"_index":322,"title":{},"body":{"components/BoardComponent.html":{}}}],["formen",{"_index":145,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["formen[typeid",{"_index":345,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["freeze",{"_index":45,"title":{},"body":{"components/BoardComponent.html":{}}}],["further",{"_index":592,"title":{},"body":{"index.html":{}}}],["gameover",{"_index":46,"title":{},"body":{"components/BoardComponent.html":{}}}],["gamestarted",{"_index":28,"title":{},"body":{"components/BoardComponent.html":{}}}],["generate",{"_index":571,"title":{},"body":{"index.html":{}}}],["generated",{"_index":552,"title":{},"body":{"index.html":{}}}],["getemptyboard",{"_index":47,"title":{},"body":{"components/BoardComponent.html":{}}}],["getlinesclearedpoints",{"_index":367,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["getlinesclearedpoints(lines",{"_index":374,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["getting",{"_index":548,"title":{"index.html":{}},"body":{}}],["gleicher",{"_index":222,"title":{},"body":{"components/BoardComponent.html":{}}}],["go",{"_index":595,"title":{},"body":{"index.html":{}}}],["green",{"_index":428,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"miscellaneous/variables.html":{}}}],["grid",{"_index":309,"title":{},"body":{"components/BoardComponent.html":{}}}],["grösse",{"_index":199,"title":{},"body":{"components/BoardComponent.html":{}}}],["grössen",{"_index":189,"title":{},"body":{"components/BoardComponent.html":{}}}],["hard",{"_index":168,"title":{},"body":{"components/BoardComponent.html":{}}}],["hard_drop",{"_index":442,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["help",{"_index":593,"title":{},"body":{"index.html":{}}}],["highscore",{"_index":29,"title":{},"body":{"components/BoardComponent.html":{}}}],["hilfsmethode",{"_index":401,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["hostlistener",{"_index":138,"title":{},"body":{"components/BoardComponent.html":{}}}],["hostlistener('window:keydown",{"_index":158,"title":{},"body":{"components/BoardComponent.html":{}}}],["hostlisteners",{"_index":53,"title":{},"body":{"components/BoardComponent.html":{}}}],["html",{"_index":324,"title":{},"body":{"components/BoardComponent.html":{}}}],["http://localhost:4200",{"_index":564,"title":{},"body":{"index.html":{}}}],["id",{"_index":224,"title":{},"body":{"components/BoardComponent.html":{}}}],["identifier",{"_index":517,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":11,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["import",{"_index":136,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{}}}],["index",{"_index":22,"title":{"index.html":{}},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{}}}],["initboard",{"_index":48,"title":{},"body":{"components/BoardComponent.html":{}}}],["initialisiert",{"_index":182,"title":{},"body":{"components/BoardComponent.html":{}}}],["initnext",{"_index":49,"title":{},"body":{"components/BoardComponent.html":{}}}],["injectable",{"_index":363,"title":{"injectables/IsOnEdge.html":{},"injectables/TetromisRotation.html":{}},"body":{"injectables/IsOnEdge.html":{},"injectables/TetromisRotation.html":{},"coverage.html":{}}}],["injectables",{"_index":364,"title":{},"body":{"injectables/IsOnEdge.html":{},"injectables/TetromisRotation.html":{},"overview.html":{}}}],["insidewalls",{"_index":368,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["insidewalls(x",{"_index":376,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["instance",{"_index":63,"title":{},"body":{"components/BoardComponent.html":{}}}],["interface",{"_index":334,"title":{"interfaces/ITetromino.html":{}},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":335,"title":{},"body":{"interfaces/ITetromino.html":{}}}],["isempty",{"_index":369,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["isempty(value",{"_index":378,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["isonedge",{"_index":57,"title":{"injectables/IsOnEdge.html":{}},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{},"coverage.html":{}}}],["itetromino",{"_index":116,"title":{"interfaces/ITetromino.html":{}},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{},"coverage.html":{}}}],["json.parse(json.stringify(piece",{"_index":513,"title":{},"body":{"injectables/TetromisRotation.html":{}}}],["karma",{"_index":588,"title":{},"body":{"index.html":{}}}],["keyboardevent",{"_index":73,"title":{},"body":{"components/BoardComponent.html":{}}}],["keyevent(event",{"_index":159,"title":{},"body":{"components/BoardComponent.html":{}}}],["keys",{"_index":143,"title":{"classes/KEYS.html":{}},"body":{"components/BoardComponent.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"coverage.html":{}}}],["keys.down",{"_index":121,"title":{},"body":{"components/BoardComponent.html":{}}}],["keys.esc",{"_index":161,"title":{},"body":{"components/BoardComponent.html":{}}}],["keys.left",{"_index":114,"title":{},"body":{"components/BoardComponent.html":{}}}],["keys.right",{"_index":120,"title":{},"body":{"components/BoardComponent.html":{}}}],["keys.space",{"_index":124,"title":{},"body":{"components/BoardComponent.html":{}}}],["keys.up",{"_index":125,"title":{},"body":{"components/BoardComponent.html":{}}}],["klasse",{"_index":386,"title":{},"body":{"injectables/IsOnEdge.html":{},"injectables/TetromisRotation.html":{}}}],["leeres",{"_index":302,"title":{},"body":{"components/BoardComponent.html":{}}}],["left",{"_index":318,"title":{},"body":{"components/BoardComponent.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["legalen",{"_index":390,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["legend",{"_index":323,"title":{},"body":{"components/BoardComponent.html":{}}}],["length",{"_index":306,"title":{},"body":{"components/BoardComponent.html":{}}}],["level",{"_index":30,"title":{"classes/LEVEL.html":{}},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"coverage.html":{}}}],["level[this.level",{"_index":235,"title":{},"body":{"components/BoardComponent.html":{}}}],["lines",{"_index":31,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{}}}],["lines_per_level",{"_index":147,"title":{},"body":{"components/BoardComponent.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["linie",{"_index":271,"title":{},"body":{"components/BoardComponent.html":{}}}],["literal",{"_index":134,"title":{},"body":{"components/BoardComponent.html":{}}}],["löschen",{"_index":272,"title":{},"body":{"components/BoardComponent.html":{}}}],["margin",{"_index":310,"title":{},"body":{"components/BoardComponent.html":{}}}],["matching",{"_index":332,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["math.floor(math.random",{"_index":361,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["matrix",{"_index":303,"title":{},"body":{"components/BoardComponent.html":{}}}],["memberof",{"_index":157,"title":{},"body":{"components/BoardComponent.html":{}}}],["metadata",{"_index":14,"title":{},"body":{"components/BoardComponent.html":{}}}],["methods",{"_index":39,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{}}}],["miscellaneous",{"_index":601,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["modules",{"_index":599,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":594,"title":{},"body":{"index.html":{}}}],["move",{"_index":493,"title":{},"body":{"classes/Tetromino.html":{}}}],["move(p",{"_index":358,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["moves",{"_index":32,"title":{},"body":{"components/BoardComponent.html":{}}}],["name",{"_index":66,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{},"index.html":{}}}],["navigate",{"_index":563,"title":{},"body":{"index.html":{}}}],["neben",{"_index":269,"title":{},"body":{"components/BoardComponent.html":{}}}],["new",{"_index":165,"title":{},"body":{"components/BoardComponent.html":{},"coverage.html":{},"index.html":{}}}],["next",{"_index":33,"title":{},"body":{"components/BoardComponent.html":{}}}],["ng",{"_index":560,"title":{},"body":{"index.html":{}}}],["ngoninit",{"_index":50,"title":{},"body":{"components/BoardComponent.html":{}}}],["none",{"_index":423,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"miscellaneous/variables.html":{}}}],["nooftypes",{"_index":362,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["notoccupied",{"_index":370,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["notoccupied(board",{"_index":380,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["now",{"_index":80,"title":{},"body":{"components/BoardComponent.html":{}}}],["number",{"_index":76,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"miscellaneous/variables.html":{}}}],["nächsten",{"_index":201,"title":{},"body":{"components/BoardComponent.html":{}}}],["object",{"_index":113,"title":{},"body":{"components/BoardComponent.html":{}}}],["objekte",{"_index":195,"title":{},"body":{"components/BoardComponent.html":{}}}],["oninit",{"_index":12,"title":{},"body":{"components/BoardComponent.html":{}}}],["optional",{"_index":68,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{}}}],["orange",{"_index":426,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"miscellaneous/variables.html":{}}}],["ort",{"_index":391,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["out",{"_index":597,"title":{},"body":{"index.html":{}}}],["over",{"_index":300,"title":{},"body":{"components/BoardComponent.html":{}}}],["overview",{"_index":600,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":115,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{}}}],["p.shape",{"_index":359,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["p.shape.every((row",{"_index":393,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["p.x",{"_index":118,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{}}}],["p.y",{"_index":123,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{}}}],["package",{"_index":529,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":156,"title":{},"body":{"components/BoardComponent.html":{}}}],["parameters",{"_index":64,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{}}}],["paused",{"_index":34,"title":{},"body":{"components/BoardComponent.html":{}}}],["performance.now",{"_index":220,"title":{},"body":{"components/BoardComponent.html":{}}}],["piece",{"_index":35,"title":{},"body":{"components/BoardComponent.html":{},"injectables/TetromisRotation.html":{}}}],["play",{"_index":51,"title":{},"body":{"components/BoardComponent.html":{}}}],["points",{"_index":36,"title":{},"body":{"components/BoardComponent.html":{}}}],["private",{"_index":177,"title":{},"body":{"components/BoardComponent.html":{}}}],["prod",{"_index":579,"title":{},"body":{"index.html":{}}}],["production",{"_index":581,"title":{},"body":{"index.html":{}}}],["project",{"_index":551,"title":{},"body":{"index.html":{}}}],["properties",{"_index":23,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{}}}],["protractor",{"_index":591,"title":{},"body":{"index.html":{}}}],["providedin",{"_index":384,"title":{},"body":{"injectables/IsOnEdge.html":{},"injectables/TetromisRotation.html":{}}}],["punkte",{"_index":146,"title":{"classes/PUNKTE.html":{}},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"injectables/TetromisRotation.html":{},"coverage.html":{}}}],["punkte.hard_drop",{"_index":172,"title":{},"body":{"components/BoardComponent.html":{}}}],["punkte.soft_drop",{"_index":175,"title":{},"body":{"components/BoardComponent.html":{}}}],["purple",{"_index":429,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"miscellaneous/variables.html":{}}}],["randomizetetrominotype",{"_index":494,"title":{},"body":{"classes/Tetromino.html":{}}}],["randomizetetrominotype(nooftypes",{"_index":360,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["readme",{"_index":598,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":406,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["rechnet",{"_index":186,"title":{},"body":{"components/BoardComponent.html":{}}}],["red",{"_index":298,"title":{},"body":{"components/BoardComponent.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"miscellaneous/variables.html":{}}}],["reload",{"_index":566,"title":{},"body":{"index.html":{}}}],["request",{"_index":223,"title":{},"body":{"components/BoardComponent.html":{}}}],["requestanimationframe(this.animate.bind(this",{"_index":246,"title":{},"body":{"components/BoardComponent.html":{}}}],["requestid",{"_index":37,"title":{},"body":{"components/BoardComponent.html":{}}}],["resetgame",{"_index":52,"title":{},"body":{"components/BoardComponent.html":{}}}],["result",{"_index":331,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":333,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":244,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{}}}],["returns",{"_index":82,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{}}}],["right",{"_index":320,"title":{},"body":{"components/BoardComponent.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["root",{"_index":385,"title":{},"body":{"injectables/IsOnEdge.html":{},"injectables/TetromisRotation.html":{}}}],["rotate",{"_index":58,"title":{},"body":{"components/BoardComponent.html":{},"injectables/TetromisRotation.html":{}}}],["rotate(piece",{"_index":506,"title":{},"body":{"injectables/TetromisRotation.html":{}}}],["rotate.service",{"_index":151,"title":{},"body":{"components/BoardComponent.html":{}}}],["rotieren",{"_index":512,"title":{},"body":{"injectables/TetromisRotation.html":{}}}],["row.every((value",{"_index":395,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["row.every(value",{"_index":277,"title":{},"body":{"components/BoardComponent.html":{}}}],["row.foreach((value",{"_index":255,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["row.reverse",{"_index":514,"title":{},"body":{"injectables/TetromisRotation.html":{}}}],["rows",{"_index":142,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"injectables/TetromisRotation.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":559,"title":{},"body":{"index.html":{}}}],["running",{"_index":582,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":542,"title":{},"body":{"dependencies.html":{}}}],["scaffolding",{"_index":570,"title":{},"body":{"index.html":{}}}],["score",{"_index":275,"title":{},"body":{"components/BoardComponent.html":{}}}],["selector",{"_index":15,"title":{},"body":{"components/BoardComponent.html":{}}}],["serve",{"_index":561,"title":{},"body":{"index.html":{}}}],["server",{"_index":558,"title":{},"body":{"index.html":{}}}],["service",{"_index":510,"title":{},"body":{"injectables/TetromisRotation.html":{}}}],["shape",{"_index":337,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["sich",{"_index":388,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["single",{"_index":434,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["skaliert",{"_index":193,"title":{},"body":{"components/BoardComponent.html":{}}}],["soft_drop",{"_index":441,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["solid",{"_index":315,"title":{},"body":{"components/BoardComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{},"index.html":{}}}],["space",{"_index":409,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["spawn",{"_index":340,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["spiel",{"_index":211,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/.../constants.ts",{"_index":603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/board/board.component.ts",{"_index":10,"title":{},"body":{"components/BoardComponent.html":{},"coverage.html":{}}}],["src/app/board/board.component.ts:106",{"_index":93,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:116",{"_index":95,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:133",{"_index":96,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:143",{"_index":77,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:157",{"_index":85,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:164",{"_index":86,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:176",{"_index":87,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:195",{"_index":84,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:21",{"_index":103,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:216",{"_index":89,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:227",{"_index":90,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:23",{"_index":105,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:238",{"_index":91,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:24",{"_index":107,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:25",{"_index":108,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:26",{"_index":97,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:27",{"_index":131,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:28",{"_index":129,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:29",{"_index":133,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:30",{"_index":130,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:31",{"_index":109,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:32",{"_index":135,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:33",{"_index":132,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:34",{"_index":110,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:35",{"_index":112,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:36",{"_index":111,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:37",{"_index":127,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:52",{"_index":74,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:73",{"_index":61,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:88",{"_index":94,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:95",{"_index":92,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/constants.ts",{"_index":405,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/board/constants.ts:27",{"_index":414,"title":{},"body":{"classes/KEYS.html":{}}}],["src/app/board/constants.ts:28",{"_index":420,"title":{},"body":{"classes/KEYS.html":{}}}],["src/app/board/constants.ts:29",{"_index":416,"title":{},"body":{"classes/KEYS.html":{}}}],["src/app/board/constants.ts:30",{"_index":422,"title":{},"body":{"classes/KEYS.html":{}}}],["src/app/board/constants.ts:31",{"_index":418,"title":{},"body":{"classes/KEYS.html":{}}}],["src/app/board/constants.ts:32",{"_index":412,"title":{},"body":{"classes/KEYS.html":{}}}],["src/app/board/constants.ts:36",{"_index":488,"title":{},"body":{"classes/PUNKTE.html":{}}}],["src/app/board/constants.ts:37",{"_index":486,"title":{},"body":{"classes/PUNKTE.html":{}}}],["src/app/board/constants.ts:38",{"_index":491,"title":{},"body":{"classes/PUNKTE.html":{}}}],["src/app/board/constants.ts:39",{"_index":490,"title":{},"body":{"classes/PUNKTE.html":{}}}],["src/app/board/constants.ts:40",{"_index":489,"title":{},"body":{"classes/PUNKTE.html":{}}}],["src/app/board/constants.ts:41",{"_index":487,"title":{},"body":{"classes/PUNKTE.html":{}}}],["src/app/board/constants.ts:45",{"_index":465,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:46",{"_index":466,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:47",{"_index":477,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:48",{"_index":479,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:49",{"_index":480,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:50",{"_index":481,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:51",{"_index":482,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:52",{"_index":483,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:53",{"_index":484,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:54",{"_index":485,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:55",{"_index":467,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:56",{"_index":468,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:57",{"_index":469,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:58",{"_index":470,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:59",{"_index":471,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:60",{"_index":472,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:61",{"_index":473,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:62",{"_index":474,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:63",{"_index":475,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:64",{"_index":476,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:65",{"_index":478,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/edge.service.ts",{"_index":365,"title":{},"body":{"injectables/IsOnEdge.html":{},"coverage.html":{}}}],["src/app/board/edge.service.ts:10",{"_index":383,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["src/app/board/edge.service.ts:25",{"_index":379,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["src/app/board/edge.service.ts:29",{"_index":377,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["src/app/board/edge.service.ts:33",{"_index":373,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["src/app/board/edge.service.ts:37",{"_index":381,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["src/app/board/edge.service.ts:42",{"_index":375,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["src/app/board/rotate.service.ts",{"_index":505,"title":{},"body":{"injectables/TetromisRotation.html":{},"coverage.html":{}}}],["src/app/board/rotate.service.ts:11",{"_index":507,"title":{},"body":{"injectables/TetromisRotation.html":{}}}],["src/app/board/tetromis.component.ts",{"_index":336,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{},"coverage.html":{}}}],["src/app/board/tetromis.component.ts:11",{"_index":498,"title":{},"body":{"classes/Tetromino.html":{}}}],["src/app/board/tetromis.component.ts:12",{"_index":499,"title":{},"body":{"classes/Tetromino.html":{}}}],["src/app/board/tetromis.component.ts:13",{"_index":497,"title":{},"body":{"classes/Tetromino.html":{}}}],["src/app/board/tetromis.component.ts:14",{"_index":496,"title":{},"body":{"classes/Tetromino.html":{}}}],["src/app/board/tetromis.component.ts:20",{"_index":504,"title":{},"body":{"classes/Tetromino.html":{}}}],["src/app/board/tetromis.component.ts:28",{"_index":500,"title":{},"body":{"classes/Tetromino.html":{}}}],["src/app/board/tetromis.component.ts:39",{"_index":501,"title":{},"body":{"classes/Tetromino.html":{}}}],["src/app/board/tetromis.component.ts:51",{"_index":502,"title":{},"body":{"classes/Tetromino.html":{}}}],["src/app/board/tetromis.component.ts:57",{"_index":503,"title":{},"body":{"classes/Tetromino.html":{}}}],["start",{"_index":154,"title":{},"body":{"components/BoardComponent.html":{}}}],["started",{"_index":549,"title":{"index.html":{}},"body":{}}],["starten",{"_index":213,"title":{},"body":{"components/BoardComponent.html":{}}}],["state",{"_index":166,"title":{},"body":{"components/BoardComponent.html":{}}}],["statements",{"_index":518,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":101,"title":{},"body":{"components/BoardComponent.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["stored",{"_index":576,"title":{},"body":{"index.html":{}}}],["string",{"_index":338,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["style",{"_index":314,"title":{},"body":{"components/BoardComponent.html":{}}}],["styles",{"_index":6,"title":{},"body":{"components/BoardComponent.html":{}}}],["styleurls",{"_index":18,"title":{},"body":{"components/BoardComponent.html":{}}}],["table",{"_index":528,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":527,"title":{},"body":{"coverage.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/BoardComponent.html":{}}}],["templateurl",{"_index":20,"title":{},"body":{"components/BoardComponent.html":{}}}],["test",{"_index":585,"title":{},"body":{"index.html":{}}}],["tests",{"_index":584,"title":{},"body":{"index.html":{}}}],["tetris",{"_index":308,"title":{},"body":{"components/BoardComponent.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["tetromino",{"_index":128,"title":{"classes/Tetromino.html":{}},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/Tetromino.html":{},"coverage.html":{}}}],["tetromino(this.ctx",{"_index":216,"title":{},"body":{"components/BoardComponent.html":{}}}],["tetromis.component",{"_index":149,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{},"injectables/TetromisRotation.html":{}}}],["tetromisrotation",{"_index":59,"title":{"injectables/TetromisRotation.html":{}},"body":{"components/BoardComponent.html":{},"injectables/TetromisRotation.html":{},"coverage.html":{}}}],["this.abovefloor(y",{"_index":399,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["this.animate",{"_index":229,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.board",{"_index":170,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.board.foreach((row",{"_index":254,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.board.splice(y",{"_index":278,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.board.unshift(array(cols).fill(0",{"_index":279,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.board[y",{"_index":286,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.canvas.nativeelement.getcontext('2d",{"_index":185,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.canvasnext.nativeelement.getcontext('2d",{"_index":198,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.clearlines",{"_index":262,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.color",{"_index":346,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["this.ctx",{"_index":184,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.ctx.canvas.height",{"_index":192,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.ctx.canvas.width",{"_index":191,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.ctx.clearrect(0",{"_index":249,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.ctx.fillrect(1",{"_index":291,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.ctx.fillrect(this.x",{"_index":351,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["this.ctx.fillrect(x",{"_index":258,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.ctx.fillstyle",{"_index":256,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["this.ctx.filltext('game",{"_index":299,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.ctx.font",{"_index":295,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.ctx.scale(block_size",{"_index":196,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.ctxnext",{"_index":197,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.ctxnext.canvas.height",{"_index":207,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.ctxnext.canvas.width",{"_index":204,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.ctxnext.scale(block_size",{"_index":208,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.draw",{"_index":245,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.drawboard",{"_index":251,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.drop",{"_index":243,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.edge.getlinesclearedpoints(lines",{"_index":280,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.edge.valid(p",{"_index":169,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.freeze",{"_index":261,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.gameover",{"_index":162,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.gamestarted",{"_index":214,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.getemptyboard",{"_index":233,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.highscore",{"_index":181,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.initboard",{"_index":178,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.initnext",{"_index":179,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.insidewalls(x",{"_index":398,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["this.isempty(value",{"_index":397,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["this.level",{"_index":232,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.lines",{"_index":231,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.moves[event.keycode",{"_index":163,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.moves[event.keycode](this.piece",{"_index":167,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.moves[keys.down](this.piece",{"_index":174,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.next",{"_index":215,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.next.drawnext(this.ctxnext",{"_index":218,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.notoccupied(board",{"_index":400,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["this.paused",{"_index":236,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.piece",{"_index":217,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.piece.draw",{"_index":250,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.piece.move(p",{"_index":173,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.piece.shape.foreach((row",{"_index":285,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.piece.x",{"_index":288,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.piece.y",{"_index":263,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.piece.y][x",{"_index":287,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.points",{"_index":171,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.randomizetetrominotype(farben.length",{"_index":343,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["this.requestid",{"_index":227,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.resetgame",{"_index":180,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.rotate.rotate(p",{"_index":126,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.shape",{"_index":344,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["this.shape.foreach((row",{"_index":350,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["this.spawn",{"_index":339,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["this.time",{"_index":234,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.time.elapsed",{"_index":241,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.time.level",{"_index":242,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.time.start",{"_index":219,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.x",{"_index":348,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["this.y",{"_index":349,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["time",{"_index":38,"title":{},"body":{"components/BoardComponent.html":{}}}],["top",{"_index":311,"title":{},"body":{"components/BoardComponent.html":{}}}],["tree",{"_index":8,"title":{},"body":{"components/BoardComponent.html":{}}}],["triple",{"_index":438,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["true",{"_index":102,"title":{},"body":{"components/BoardComponent.html":{}}}],["tslib",{"_index":544,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":67,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeid",{"_index":342,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["um",{"_index":210,"title":{},"body":{"components/BoardComponent.html":{}}}],["und",{"_index":273,"title":{},"body":{"components/BoardComponent.html":{}}}],["unit",{"_index":583,"title":{},"body":{"index.html":{}}}],["unten",{"_index":283,"title":{},"body":{"components/BoardComponent.html":{}}}],["up",{"_index":410,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["use",{"_index":572,"title":{},"body":{"index.html":{}}}],["valid",{"_index":371,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["valid(p",{"_index":382,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["validiert",{"_index":387,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["value",{"_index":79,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":327,"title":{},"body":{"components/BoardComponent.html":{}}}],["variable",{"_index":522,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":602,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verloren",{"_index":289,"title":{},"body":{"components/BoardComponent.html":{}}}],["version",{"_index":555,"title":{},"body":{"index.html":{}}}],["via",{"_index":587,"title":{},"body":{"index.html":{}}}],["viewchild",{"_index":137,"title":{},"body":{"components/BoardComponent.html":{}}}],["viewchild('board",{"_index":100,"title":{},"body":{"components/BoardComponent.html":{}}}],["viewchild('next",{"_index":104,"title":{},"body":{"components/BoardComponent.html":{}}}],["void",{"_index":83,"title":{},"body":{"components/BoardComponent.html":{},"classes/Tetromino.html":{}}}],["von",{"_index":200,"title":{},"body":{"components/BoardComponent.html":{}}}],["wand",{"_index":403,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["wenn",{"_index":282,"title":{},"body":{"components/BoardComponent.html":{}}}],["white",{"_index":317,"title":{},"body":{"components/BoardComponent.html":{}}}],["window:keydown",{"_index":54,"title":{},"body":{"components/BoardComponent.html":{}}}],["window:keydown(event",{"_index":72,"title":{},"body":{"components/BoardComponent.html":{}}}],["x",{"_index":117,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{}}}],["y",{"_index":122,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{}}}],["yellow",{"_index":427,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"miscellaneous/variables.html":{}}}],["zeichnen",{"_index":247,"title":{},"body":{"components/BoardComponent.html":{}}}],["zone.js",{"_index":546,"title":{},"body":{"dependencies.html":{}}}],["zu",{"_index":212,"title":{},"body":{"components/BoardComponent.html":{}}}],["zurücksetzen",{"_index":230,"title":{},"body":{"components/BoardComponent.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/BoardComponent.html":{"url":"components/BoardComponent.html","title":"component - BoardComponent","body":"\n                   \n\n\n\n\n\n  Components\n  BoardComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/board/board.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n    \n        Example\n    \n    \n    \n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-board\n            \n\n            \n                styleUrls\n                ./board.component.css\n            \n\n\n\n            \n                templateUrl\n                ./board.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                board\n                            \n                            \n                                canvas\n                            \n                            \n                                canvasNext\n                            \n                            \n                                ctx\n                            \n                            \n                                ctxNext\n                            \n                            \n                                gameStarted\n                            \n                            \n                                highScore\n                            \n                            \n                                level\n                            \n                            \n                                lines\n                            \n                            \n                                moves\n                            \n                            \n                                next\n                            \n                            \n                                paused\n                            \n                            \n                                piece\n                            \n                            \n                                points\n                            \n                            \n                                requestId\n                            \n                            \n                                time\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                animate\n                            \n                            \n                                clearLines\n                            \n                            \n                                draw\n                            \n                            \n                                drawBoard\n                            \n                            \n                                drop\n                            \n                            \n                                freeze\n                            \n                            \n                                gameOver\n                            \n                            \n                                getEmptyBoard\n                            \n                            \n                                initBoard\n                            \n                            \n                                initNext\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                play\n                            \n                            \n                                resetGame\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                window:keydown\n                            \n                        \n                    \n                \n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(edge: IsOnEdge, rotate: TetromisRotation)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/board.component.ts:73\n                            \n                        \n\n                \n                    \n                            Creates an instance of BoardComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        edge\n                                                  \n                                                        \n                                                                        IsOnEdge\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rotate\n                                                  \n                                                        \n                                                                        TetromisRotation\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            window:keydown\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nwindow:keydown(event: KeyboardEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/board.component.ts:52\n                \n            \n\n\n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            animate\n                        \n                        \n                    \n                \n            \n            \n                \nanimate(now: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/board.component.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    now\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clearLines\n                        \n                        \n                    \n                \n            \n            \n                \nclearLines()\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/board.component.ts:195\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \ndraw()\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/board.component.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            drawBoard\n                        \n                        \n                    \n                \n            \n            \n                \ndrawBoard()\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/board.component.ts:164\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            drop\n                        \n                        \n                    \n                \n            \n            \n                \ndrop()\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/board.component.ts:176\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            freeze\n                        \n                        \n                    \n                \n            \n            \n                \nfreeze()\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/board.component.ts:216\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            gameOver\n                        \n                        \n                    \n                \n            \n            \n                \ngameOver()\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/board.component.ts:227\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEmptyBoard\n                        \n                        \n                    \n                \n            \n            \n                \ngetEmptyBoard()\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/board.component.ts:238\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     [][]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            initBoard\n                        \n                        \n                    \n                \n            \n            \n                \ninitBoard()\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/board.component.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            initNext\n                        \n                        \n                    \n                \n            \n            \n                \ninitNext()\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/board.component.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/board.component.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            play\n                        \n                        \n                    \n                \n            \n            \n                \nplay()\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/board.component.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            resetGame\n                        \n                        \n                    \n                \n            \n            \n                \nresetGame()\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/board.component.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            board\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[][]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/board.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            canvas\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('board', {static: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/board.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            canvasNext\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('next', {static: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/board.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ctx\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     CanvasRenderingContext2D\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/board.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ctxNext\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     CanvasRenderingContext2D\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/board.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gameStarted\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/board.component.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            highScore\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/board.component.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            level\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/board.component.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lines\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/board.component.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            moves\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    [KEYS.LEFT]: (p: ITetromino): ITetromino => ({ ...p, x: p.x - 1 }),\n    [KEYS.RIGHT]: (p: ITetromino): ITetromino => ({ ...p, x: p.x + 1 }),\n    [KEYS.DOWN]: (p: ITetromino): ITetromino => ({ ...p, y: p.y + 1 }),\n    [KEYS.SPACE]: (p: ITetromino): ITetromino => ({ ...p, y: p.y + 1 }),\n    [KEYS.UP]: (p: ITetromino): ITetromino => this.rotate.rotate(p)\n  }\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/board.component.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            next\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Tetromino\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/board.component.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            paused\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/board.component.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            piece\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Tetromino\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/board.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            points\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/board.component.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            requestId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/board.component.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            time\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/board.component.ts:32\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, ViewChild, ElementRef, OnInit, HostListener} from '@angular/core';\nimport { COLS, BLOCK_SIZE, ROWS, KEYS, FARBEN, FORMEN, PUNKTE, LEVEL, LINES_PER_LEVEL } from './constants';\nimport { Tetromino, ITetromino } from './tetromis.component';\nimport {IsOnEdge} from './edge.service';\nimport {TetromisRotation} from './rotate.service';\n\n/**\n *\n *\n * @export\n * @class BoardComponent\n * @implements {OnInit}\n */\n@Component({\n  selector: 'app-board',\n  templateUrl: './board.component.html',\n  styleUrls: ['./board.component.css']\n})\nexport class BoardComponent implements OnInit {\n  @ViewChild('board', { static: true })\n  canvas: ElementRef;\n  @ViewChild('next', { static: true })\n  canvasNext: ElementRef;\n  ctx: CanvasRenderingContext2D;\n  ctxNext: CanvasRenderingContext2D;\n  board: number[][];\n  piece: Tetromino;\n  next: Tetromino;\n  requestId: number;\n  paused: boolean;\n  gameStarted: boolean;\n  time: { start: number; elapsed: number; level: number };\n  points: number;\n  highScore: number;\n  lines: number;\n  level: number;\n  moves = {\n    [KEYS.LEFT]: (p: ITetromino): ITetromino => ({ ...p, x: p.x - 1 }),\n    [KEYS.RIGHT]: (p: ITetromino): ITetromino => ({ ...p, x: p.x + 1 }),\n    [KEYS.DOWN]: (p: ITetromino): ITetromino => ({ ...p, y: p.y + 1 }),\n    [KEYS.SPACE]: (p: ITetromino): ITetromino => ({ ...p, y: p.y + 1 }),\n    [KEYS.UP]: (p: ITetromino): ITetromino => this.rotate.rotate(p)\n  };\n\n  /**\n   *\n   *\n   * @param {KeyboardEvent} event\n   * @memberof BoardComponent\n   */\n  @HostListener('window:keydown', ['$event'])\n  keyEvent(event: KeyboardEvent) {\n    if (event.keyCode === KEYS.ESC) {\n      this.gameOver();\n    } else if (this.moves[event.keyCode]) {\n      event.preventDefault();\n      // Get new state\n      let p = this.moves[event.keyCode](this.piece);\n      if (event.keyCode === KEYS.SPACE) {\n        // Hard drop\n        while (this.edge.valid(p, this.board)) {\n          this.points += PUNKTE.HARD_DROP;\n          this.piece.move(p);\n          p = this.moves[KEYS.DOWN](this.piece);\n        }\n      } else if (this.edge.valid(p, this.board)) {\n        this.piece.move(p);\n        if (event.keyCode === KEYS.DOWN) {\n          this.points += PUNKTE.SOFT_DROP;\n        }\n      }\n    }\n  }\n\n  /**\n   *Creates an instance of BoardComponent.\n   * @param {IsOnEdge} edge\n   * @param {TetromisRotation} rotate\n   * @memberof BoardComponent\n   */\n  constructor(private edge: IsOnEdge, private rotate: TetromisRotation) {}\n\n  /**\n   *\n   *\n   * @memberof BoardComponent\n   */\n  ngOnInit() {\n    this.initBoard();\n    this.initNext();\n    this.resetGame();\n    this.highScore = 0;\n  }\n//Initialisiert das Board\n  initBoard() {\n    this.ctx = this.canvas.nativeElement.getContext('2d');\n\n    // Rechnet die Block grössen aus\n    this.ctx.canvas.width = COLS * BLOCK_SIZE;\n    this.ctx.canvas.height = ROWS * BLOCK_SIZE;\n\n    //Skaliert die alle Objekte\n    this.ctx.scale(BLOCK_SIZE, BLOCK_SIZE);\n  }\n\n  initNext() {\n    this.ctxNext = this.canvasNext.nativeElement.getContext('2d');\n\n    // Grösse von nächsten Blöcken ausrechnen\n    this.ctxNext.canvas.width = 4 * BLOCK_SIZE + 2;\n    this.ctxNext.canvas.height = 4 * BLOCK_SIZE;\n\n    this.ctxNext.scale(BLOCK_SIZE, BLOCK_SIZE);\n  }\n  //Button um das spiel zu starten\n  play() {\n    this.gameStarted = true;\n    this.resetGame();\n    this.next = new Tetromino(this.ctx);\n    this.piece = new Tetromino(this.ctx);\n    this.next.drawNext(this.ctxNext);\n    this.time.start = performance.now();\n\n    // Bei gleicher Request ID Animation abbrechen\n    if (this.requestId) {\n      cancelAnimationFrame(this.requestId);\n    }\n\n    this.animate();\n  }\n\n  // Spiel zurücksetzen\n  resetGame() {\n    this.points = 0;\n    this.lines = 0;\n    this.level = 0;\n    this.board = this.getEmptyBoard();\n    this.time = { start: 0, elapsed: 0, level: LEVEL[this.level] };\n    this.paused = false;\n  }\n  \n  //Animationsloop der dropbewegung\n  animate(now = 0) {\n    this.time.elapsed = now - this.time.start;\n    if (this.time.elapsed > this.time.level) {\n      this.time.start = now;\n      if (!this.drop()) {\n        this.gameOver();\n        return;\n      }\n    }\n    this.draw();\n    this.requestId = requestAnimationFrame(this.animate.bind(this));\n  }\n\n  //Zeichnen der Blöcke\n  draw() {\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    this.piece.draw();\n    this.drawBoard();\n  }\n\n  //Zeichnen des Boardes\n  drawBoard() {\n    this.board.forEach((row, y) => {\n      row.forEach((value, x) => {\n        if (value > 0) {\n          this.ctx.fillStyle = FARBEN[value];\n          this.ctx.fillRect(x, y, 1, 1);\n        }\n      });\n    });\n  }\n\n  //Abwärts bewegung\n  drop(): boolean {\n    let p = this.moves[KEYS.DOWN](this.piece);\n    if (this.edge.valid(p, this.board)) {\n      this.piece.move(p);\n    } else {\n      this.freeze();\n      this.clearLines();\n      if (this.piece.y === 0) {\n        // Spiel beenden falls \"Dach\" erreicht\n        return false;\n      }\n      this.piece = this.next;\n      this.next = new Tetromino(this.ctx);\n      this.next.drawNext(this.ctxNext);\n    }\n    return true;\n  }\n  \n  //Bei 10 Blöcken neben einander die Linie Löschen und den Score erhöhen\n  clearLines() {\n    let lines = 0;\n    this.board.forEach((row, y) => {\n      if (row.every(value => value !== 0)) {\n        lines++;\n        this.board.splice(y, 1);\n        this.board.unshift(Array(COLS).fill(0));\n      }\n    });\n    if (lines > 0) {\n      this.points += this.edge.getLinesClearedPoints(lines, this.level);\n      this.lines += lines;\n      if (this.lines >= LINES_PER_LEVEL) {\n        this.level++;\n        this.lines -= LINES_PER_LEVEL;\n        this.time.level = LEVEL[this.level];\n      }\n    }\n  }\n\n// Block einfrieren wenn unten angekommen\n  freeze() {\n    this.piece.shape.forEach((row, y) => {\n      row.forEach((value, x) => {\n        if (value > 0) {\n          this.board[y + this.piece.y][x + this.piece.x] = value;\n        }\n      });\n    });\n  }\n\n  // Spiel Verloren\n  gameOver() {\n    this.gameStarted = false;\n    cancelAnimationFrame(this.requestId);\n    this.ctx.fillStyle = 'black';\n    this.ctx.fillRect(1, 3, 8, 1.2);\n    this.ctx.font = '1px Arial';\n    this.ctx.fillStyle = 'red';\n    this.ctx.fillText('GAME OVER', 1.8, 4);\n  }\n\n  // Leeres Matrix board erstellen\n  getEmptyBoard(): number[][] {\n    return Array.from({ length: ROWS }, () => Array(COLS).fill(0));\n  }\n}\n\n    \n\n    \n        \n\n\n    \n    \n      \n        TETRIS\n        Score: {{ points }}\n        Lines: {{ lines }}\n        Level: {{ level }}\n        \n      \n      Play\n      beenden\n    \n  \n  \n  \n    \n\n    \n                \n                    ./board.component.css\n                \n                .grid {\n\n    margin-top: 5%;\n\n}\n\n.app-board {\n    border-style: solid;\n    border-color: white;\n    margin-left: 35%;\n}\n\n.right-column {\n\n    color: white;\n\n}\n\n.right-column {\n\n    float: right;\n    margin-right: 35%;\n\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                      TETRIS        Score: {{ points }}        Lines: {{ lines }}        Level: {{ level }}                    Play      beenden          '\n    var COMPONENTS = [{'name': 'BoardComponent', 'selector': 'app-board'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BoardComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITetromino.html":{"url":"interfaces/ITetromino.html","title":"interface - ITetromino","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITetromino\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/board/tetromis.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        color\n                                \n                                \n                                        shape\n                                \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shape\n                                    \n                                \n                                \n                                    \n                                        shape:     number[][]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[][]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { FARBEN, FORMEN } from './constants';\n\nexport interface ITetromino {\n  x: number;\n  y: number;\n  color: string;\n  shape: number[][];\n}\n\nexport class Tetromino implements ITetromino {\n  x: number;\n  y: number;\n  color: string;\n  shape: number[][];\n\n  constructor(private ctx: CanvasRenderingContext2D) {\n    this.spawn();\n  }\n\n  spawn() {\n    const typeId = this.randomizeTetrominoType(FARBEN.length - 1);\n    this.shape = FORMEN[typeId];\n    this.color = FARBEN[typeId];\n    this.x = typeId === 4 ? 4 : 3;\n    this.y = 0;\n  }\n\n  draw() {\n    this.ctx.fillStyle = this.color;\n    this.shape.forEach((row, y) => {\n      row.forEach((value, x) => {\n        if (value > 0) {\n          this.ctx.fillRect(this.x + x, this.y + y, 1, 1);\n        }\n      });\n    });\n  }\n\n  drawNext(ctxNext: CanvasRenderingContext2D) {\n    ctxNext.clearRect(0, 0, ctxNext.canvas.width, ctxNext.canvas.height);\n    ctxNext.fillStyle = this.color;\n    this.shape.forEach((row, y) => {\n      row.forEach((value, x) => {\n        if (value > 0) {\n          ctxNext.fillRect(x, y, 1, 1);\n        }\n      });\n    });\n  }\n\n  move(p: ITetromino) {\n    this.x = p.x;\n    this.y = p.y;\n    this.shape = p.shape;\n  }\n\n  randomizeTetrominoType(noOfTypes: number): number {\n    return Math.floor(Math.random() * noOfTypes + 1);\n  }\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IsOnEdge.html":{"url":"injectables/IsOnEdge.html","title":"injectable - IsOnEdge","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  IsOnEdge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/board/edge.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                aboveFloor\n                            \n                            \n                                getLinesClearedPoints\n                            \n                            \n                                insideWalls\n                            \n                            \n                                isEmpty\n                            \n                            \n                                notOccupied\n                            \n                            \n                                valid\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            aboveFloor\n                        \n                        \n                    \n                \n            \n            \n                \naboveFloor(y: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/edge.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getLinesClearedPoints\n                        \n                        \n                    \n                \n            \n            \n                \ngetLinesClearedPoints(lines: number, level: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/edge.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lines\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    level\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            insideWalls\n                        \n                        \n                    \n                \n            \n            \n                \ninsideWalls(x: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/edge.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isEmpty\n                        \n                        \n                    \n                \n            \n            \n                \nisEmpty(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/edge.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            notOccupied\n                        \n                        \n                    \n                \n            \n            \n                \nnotOccupied(board: number[][], x: number, y: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/edge.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    board\n                                    \n                                            number[][]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            valid\n                        \n                        \n                    \n                \n            \n            \n                \nvalid(p: ITetromino, board: number[][])\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/edge.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                ITetromino\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    board\n                                    \n                                            number[][]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { ITetromino } from './tetromis.component';\nimport { COLS, ROWS, PUNKTE } from './constants';\n\n@Injectable({\n  providedIn: 'root'\n})\n//Klasse validiert das sich der Block an einem legalen ort bewegt.\nexport class IsOnEdge {\n  valid(p: ITetromino, board: number[][]): boolean {\n    return p.shape.every((row, dy) => {\n      return row.every((value, dx) => {\n        let x = p.x + dx;\n        let y = p.y + dy;\n        return (\n          this.isEmpty(value) ||\n          (this.insideWalls(x) &&\n            this.aboveFloor(y) &&\n            this.notOccupied(board, x, y))\n        );\n      });\n    });\n  }\n\n  isEmpty(value: number): boolean {\n    return value === 0;\n  }\n//Hilfsmethode in einer Wand\n  insideWalls(x: number): boolean {\n    return x >= 0 && x \n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KEYS.html":{"url":"classes/KEYS.html","title":"class - KEYS","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KEYS\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/board/constants.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                DOWN\n                            \n                            \n                                    Static\n                                    Readonly\n                                ESC\n                            \n                            \n                                    Static\n                                    Readonly\n                                LEFT\n                            \n                            \n                                    Static\n                                    Readonly\n                                RIGHT\n                            \n                            \n                                    Static\n                                    Readonly\n                                SPACE\n                            \n                            \n                                    Static\n                                    Readonly\n                                UP\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DOWN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 40\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            ESC\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 27\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            LEFT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 37\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            RIGHT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 39\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            SPACE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 32\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            UP\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 38\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:30\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export const FARBEN = [\n    'none',\n    'cyan',\n    'blue',\n    'orange',\n    'yellow',\n    'green',\n    'purple',\n    'red'\n  ];\n  export const FORMEN = [\n    [],\n    [[0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]],\n    [[2, 0, 0], [2, 2, 2], [0, 0, 0]],\n    [[0, 0, 3], [3, 3, 3], [0, 0, 0]],\n    [[4, 4], [4, 4]],\n    [[0, 5, 5], [5, 5, 0], [0, 0, 0]],\n    [[0, 6, 0], [6, 6, 6], [0, 0, 0]],\n    [[7, 7, 0], [0, 7, 7], [0, 0, 0]]\n  ];\nexport const COLS = 10;\nexport const ROWS = 20;\nexport const BLOCK_SIZE = 30;\nexport const LINES_PER_LEVEL = 10;\n\nexport class KEYS {\n    static readonly ESC = 27;\n    static readonly SPACE = 32;\n    static readonly LEFT = 37;\n    static readonly UP = 38;\n    static readonly RIGHT = 39;\n    static readonly DOWN = 40;\n  }\n\n  export class PUNKTE {\n    static readonly SINGLE = 100;\n    static readonly DOUBLE = 300;\n    static readonly TRIPLE = 500;\n    static readonly TETRIS = 800;\n    static readonly SOFT_DROP = 1;\n    static readonly HARD_DROP = 2;\n  }\n\n  export class LEVEL {\n    static readonly 0 = 800;\n    static readonly 1 = 720;\n    static readonly 2 = 630;\n    static readonly 3 = 550;\n    static readonly 4 = 470;\n    static readonly 5 = 380;\n    static readonly 6 = 300;\n    static readonly 7 = 220;\n    static readonly 8 = 130;\n    static readonly 9 = 100;\n    static readonly 10 = 80;\n    static readonly 11 = 80;\n    static readonly 12 = 80;\n    static readonly 13 = 70;\n    static readonly 14 = 70;\n    static readonly 15 = 70;\n    static readonly 16 = 50;\n    static readonly 17 = 50;\n    static readonly 18 = 50;\n    static readonly 19 = 30;\n    static readonly 20 = 30;\n    // 29+ is 20ms\n  }\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LEVEL.html":{"url":"classes/LEVEL.html","title":"class - LEVEL","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LEVEL\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/board/constants.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                0\n                            \n                            \n                                    Static\n                                    Readonly\n                                1\n                            \n                            \n                                    Static\n                                    Readonly\n                                10\n                            \n                            \n                                    Static\n                                    Readonly\n                                11\n                            \n                            \n                                    Static\n                                    Readonly\n                                12\n                            \n                            \n                                    Static\n                                    Readonly\n                                13\n                            \n                            \n                                    Static\n                                    Readonly\n                                14\n                            \n                            \n                                    Static\n                                    Readonly\n                                15\n                            \n                            \n                                    Static\n                                    Readonly\n                                16\n                            \n                            \n                                    Static\n                                    Readonly\n                                17\n                            \n                            \n                                    Static\n                                    Readonly\n                                18\n                            \n                            \n                                    Static\n                                    Readonly\n                                19\n                            \n                            \n                                    Static\n                                    Readonly\n                                2\n                            \n                            \n                                    Static\n                                    Readonly\n                                20\n                            \n                            \n                                    Static\n                                    Readonly\n                                3\n                            \n                            \n                                    Static\n                                    Readonly\n                                4\n                            \n                            \n                                    Static\n                                    Readonly\n                                5\n                            \n                            \n                                    Static\n                                    Readonly\n                                6\n                            \n                            \n                                    Static\n                                    Readonly\n                                7\n                            \n                            \n                                    Static\n                                    Readonly\n                                8\n                            \n                            \n                                    Static\n                                    Readonly\n                                9\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            0\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 800\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            1\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 720\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:46\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            10\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 80\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:55\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            11\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 80\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:56\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            12\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 80\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:57\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            13\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 70\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:58\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            14\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 70\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            15\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 70\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:60\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            16\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 50\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:61\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            17\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 50\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:62\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            18\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 50\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:63\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            19\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 30\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:64\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 630\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            20\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 30\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:65\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            3\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 550\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            4\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 470\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:49\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            5\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 380\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            6\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 300\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:51\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            7\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 220\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:52\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            8\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 130\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            9\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 100\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:54\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export const FARBEN = [\n    'none',\n    'cyan',\n    'blue',\n    'orange',\n    'yellow',\n    'green',\n    'purple',\n    'red'\n  ];\n  export const FORMEN = [\n    [],\n    [[0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]],\n    [[2, 0, 0], [2, 2, 2], [0, 0, 0]],\n    [[0, 0, 3], [3, 3, 3], [0, 0, 0]],\n    [[4, 4], [4, 4]],\n    [[0, 5, 5], [5, 5, 0], [0, 0, 0]],\n    [[0, 6, 0], [6, 6, 6], [0, 0, 0]],\n    [[7, 7, 0], [0, 7, 7], [0, 0, 0]]\n  ];\nexport const COLS = 10;\nexport const ROWS = 20;\nexport const BLOCK_SIZE = 30;\nexport const LINES_PER_LEVEL = 10;\n\nexport class KEYS {\n    static readonly ESC = 27;\n    static readonly SPACE = 32;\n    static readonly LEFT = 37;\n    static readonly UP = 38;\n    static readonly RIGHT = 39;\n    static readonly DOWN = 40;\n  }\n\n  export class PUNKTE {\n    static readonly SINGLE = 100;\n    static readonly DOUBLE = 300;\n    static readonly TRIPLE = 500;\n    static readonly TETRIS = 800;\n    static readonly SOFT_DROP = 1;\n    static readonly HARD_DROP = 2;\n  }\n\n  export class LEVEL {\n    static readonly 0 = 800;\n    static readonly 1 = 720;\n    static readonly 2 = 630;\n    static readonly 3 = 550;\n    static readonly 4 = 470;\n    static readonly 5 = 380;\n    static readonly 6 = 300;\n    static readonly 7 = 220;\n    static readonly 8 = 130;\n    static readonly 9 = 100;\n    static readonly 10 = 80;\n    static readonly 11 = 80;\n    static readonly 12 = 80;\n    static readonly 13 = 70;\n    static readonly 14 = 70;\n    static readonly 15 = 70;\n    static readonly 16 = 50;\n    static readonly 17 = 50;\n    static readonly 18 = 50;\n    static readonly 19 = 30;\n    static readonly 20 = 30;\n    // 29+ is 20ms\n  }\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PUNKTE.html":{"url":"classes/PUNKTE.html","title":"class - PUNKTE","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PUNKTE\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/board/constants.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                DOUBLE\n                            \n                            \n                                    Static\n                                    Readonly\n                                HARD_DROP\n                            \n                            \n                                    Static\n                                    Readonly\n                                SINGLE\n                            \n                            \n                                    Static\n                                    Readonly\n                                SOFT_DROP\n                            \n                            \n                                    Static\n                                    Readonly\n                                TETRIS\n                            \n                            \n                                    Static\n                                    Readonly\n                                TRIPLE\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DOUBLE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 300\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            HARD_DROP\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 2\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            SINGLE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 100\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            SOFT_DROP\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            TETRIS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 800\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            TRIPLE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 500\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:38\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export const FARBEN = [\n    'none',\n    'cyan',\n    'blue',\n    'orange',\n    'yellow',\n    'green',\n    'purple',\n    'red'\n  ];\n  export const FORMEN = [\n    [],\n    [[0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]],\n    [[2, 0, 0], [2, 2, 2], [0, 0, 0]],\n    [[0, 0, 3], [3, 3, 3], [0, 0, 0]],\n    [[4, 4], [4, 4]],\n    [[0, 5, 5], [5, 5, 0], [0, 0, 0]],\n    [[0, 6, 0], [6, 6, 6], [0, 0, 0]],\n    [[7, 7, 0], [0, 7, 7], [0, 0, 0]]\n  ];\nexport const COLS = 10;\nexport const ROWS = 20;\nexport const BLOCK_SIZE = 30;\nexport const LINES_PER_LEVEL = 10;\n\nexport class KEYS {\n    static readonly ESC = 27;\n    static readonly SPACE = 32;\n    static readonly LEFT = 37;\n    static readonly UP = 38;\n    static readonly RIGHT = 39;\n    static readonly DOWN = 40;\n  }\n\n  export class PUNKTE {\n    static readonly SINGLE = 100;\n    static readonly DOUBLE = 300;\n    static readonly TRIPLE = 500;\n    static readonly TETRIS = 800;\n    static readonly SOFT_DROP = 1;\n    static readonly HARD_DROP = 2;\n  }\n\n  export class LEVEL {\n    static readonly 0 = 800;\n    static readonly 1 = 720;\n    static readonly 2 = 630;\n    static readonly 3 = 550;\n    static readonly 4 = 470;\n    static readonly 5 = 380;\n    static readonly 6 = 300;\n    static readonly 7 = 220;\n    static readonly 8 = 130;\n    static readonly 9 = 100;\n    static readonly 10 = 80;\n    static readonly 11 = 80;\n    static readonly 12 = 80;\n    static readonly 13 = 70;\n    static readonly 14 = 70;\n    static readonly 15 = 70;\n    static readonly 16 = 50;\n    static readonly 17 = 50;\n    static readonly 18 = 50;\n    static readonly 19 = 30;\n    static readonly 20 = 30;\n    // 29+ is 20ms\n  }\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tetromino.html":{"url":"classes/Tetromino.html","title":"class - Tetromino","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tetromino\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/board/tetromis.component.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            ITetromino\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                color\n                            \n                            \n                                shape\n                            \n                            \n                                x\n                            \n                            \n                                y\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                draw\n                            \n                            \n                                drawNext\n                            \n                            \n                                move\n                            \n                            \n                                randomizeTetrominoType\n                            \n                            \n                                spawn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ctx: CanvasRenderingContext2D)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/tetromis.component.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ctx\n                                                  \n                                                        \n                                                                    CanvasRenderingContext2D\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            color\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/tetromis.component.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            shape\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[][]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/tetromis.component.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            x\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/tetromis.component.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            y\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/tetromis.component.ts:12\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \ndraw()\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/tetromis.component.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            drawNext\n                        \n                        \n                    \n                \n            \n            \n                \ndrawNext(ctxNext: CanvasRenderingContext2D)\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/tetromis.component.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ctxNext\n                                    \n                                            CanvasRenderingContext2D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            move\n                        \n                        \n                    \n                \n            \n            \n                \nmove(p: ITetromino)\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/tetromis.component.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                ITetromino\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            randomizeTetrominoType\n                        \n                        \n                    \n                \n            \n            \n                \nrandomizeTetrominoType(noOfTypes: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/tetromis.component.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    noOfTypes\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            spawn\n                        \n                        \n                    \n                \n            \n            \n                \nspawn()\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/tetromis.component.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FARBEN, FORMEN } from './constants';\n\nexport interface ITetromino {\n  x: number;\n  y: number;\n  color: string;\n  shape: number[][];\n}\n\nexport class Tetromino implements ITetromino {\n  x: number;\n  y: number;\n  color: string;\n  shape: number[][];\n\n  constructor(private ctx: CanvasRenderingContext2D) {\n    this.spawn();\n  }\n\n  spawn() {\n    const typeId = this.randomizeTetrominoType(FARBEN.length - 1);\n    this.shape = FORMEN[typeId];\n    this.color = FARBEN[typeId];\n    this.x = typeId === 4 ? 4 : 3;\n    this.y = 0;\n  }\n\n  draw() {\n    this.ctx.fillStyle = this.color;\n    this.shape.forEach((row, y) => {\n      row.forEach((value, x) => {\n        if (value > 0) {\n          this.ctx.fillRect(this.x + x, this.y + y, 1, 1);\n        }\n      });\n    });\n  }\n\n  drawNext(ctxNext: CanvasRenderingContext2D) {\n    ctxNext.clearRect(0, 0, ctxNext.canvas.width, ctxNext.canvas.height);\n    ctxNext.fillStyle = this.color;\n    this.shape.forEach((row, y) => {\n      row.forEach((value, x) => {\n        if (value > 0) {\n          ctxNext.fillRect(x, y, 1, 1);\n        }\n      });\n    });\n  }\n\n  move(p: ITetromino) {\n    this.x = p.x;\n    this.y = p.y;\n    this.shape = p.shape;\n  }\n\n  randomizeTetrominoType(noOfTypes: number): number {\n    return Math.floor(Math.random() * noOfTypes + 1);\n  }\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TetromisRotation.html":{"url":"injectables/TetromisRotation.html","title":"injectable - TetromisRotation","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TetromisRotation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/board/rotate.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                rotate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            rotate\n                        \n                        \n                    \n                \n            \n            \n                \nrotate(piece: ITetromino)\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/rotate.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    piece\n                                    \n                                                ITetromino\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ITetromino\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { ITetromino } from './tetromis.component';\nimport { COLS, ROWS, PUNKTE } from './constants';\n\n@Injectable({\n    providedIn: 'root'\n  })\n  //klasse ermöglicht als Service, dass Rotieren der Blöcke.\n  export class TetromisRotation {\n\n    rotate(piece: ITetromino): ITetromino {\n        let p: ITetromino = JSON.parse(JSON.stringify(piece));\n        for (let y = 0; y  row.reverse());\n        return p;\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/board/board.component.ts\n            \n            component\n            BoardComponent\n            \n                3 %\n                (1/32)\n            \n        \n        \n            \n                \n                src/app/board/constants.ts\n            \n            class\n            KEYS\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/board/constants.ts\n            \n            class\n            LEVEL\n            \n                0 %\n                (0/22)\n            \n        \n        \n            \n                \n                src/app/board/constants.ts\n            \n            class\n            PUNKTE\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/board/constants.ts\n            \n            variable\n            BLOCK_SIZE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/board/constants.ts\n            \n            variable\n            COLS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/board/constants.ts\n            \n            variable\n            FARBEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/board/constants.ts\n            \n            variable\n            FORMEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/board/constants.ts\n            \n            variable\n            LINES_PER_LEVEL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/board/constants.ts\n            \n            variable\n            ROWS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/board/edge.service.ts\n            \n            injectable\n            IsOnEdge\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/board/rotate.service.ts\n            \n            injectable\n            TetromisRotation\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/board/tetromis.component.ts\n            \n            class\n            Tetromino\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/app/board/tetromis.component.ts\n            \n            interface\n            ITetromino\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~8.2.14\n        \n            @angular/common : ~8.2.14\n        \n            @angular/compiler : ~8.2.14\n        \n            @angular/core : ~8.2.14\n        \n            @angular/forms : ~8.2.14\n        \n            @angular/platform-browser : ~8.2.14\n        \n            @angular/platform-browser-dynamic : ~8.2.14\n        \n            @angular/router : ~8.2.14\n        \n            bootstrap : ^4.4.1\n        \n            rxjs : ~6.4.0\n        \n            tslib : ^1.10.0\n        \n            zone.js : ~0.9.1\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAngularTetris\nThis project was generated with Angular CLI version 8.3.20.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BLOCK_SIZE   (src/.../constants.ts)\n                        \n                        \n                            COLS   (src/.../constants.ts)\n                        \n                        \n                            FARBEN   (src/.../constants.ts)\n                        \n                        \n                            FORMEN   (src/.../constants.ts)\n                        \n                        \n                            LINES_PER_LEVEL   (src/.../constants.ts)\n                        \n                        \n                            ROWS   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/board/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            BLOCK_SIZE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 30\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            COLS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            FARBEN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    'none',\n    'cyan',\n    'blue',\n    'orange',\n    'yellow',\n    'green',\n    'purple',\n    'red'\n  ]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            FORMEN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    [],\n    [[0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]],\n    [[2, 0, 0], [2, 2, 2], [0, 0, 0]],\n    [[0, 0, 3], [3, 3, 3], [0, 0, 0]],\n    [[4, 4], [4, 4]],\n    [[0, 5, 5], [5, 5, 0], [0, 0, 0]],\n    [[0, 6, 0], [6, 6, 6], [0, 0, 0]],\n    [[7, 7, 0], [0, 7, 7], [0, 0, 0]]\n  ]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            LINES_PER_LEVEL\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ROWS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 20\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
