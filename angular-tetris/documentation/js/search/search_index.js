var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/components/BoardComponent.html",[0,1.045,1,1.515]],["body/components/BoardComponent.html",[0,1.212,1,2.698,2,1.66,3,0.245,4,0.197,5,0.992,6,0.992,7,0.992,8,0.992,9,0.197,10,0.772,11,0.432,12,1.58,13,2.341,14,1.66,15,1.352,16,2.5,17,0.519,18,0.992,19,2.139,20,1.945,21,2.871,22,1.66,23,2.139,24,1.66,25,1.66,26,0.154,27,0.603,28,2.139,29,2.139,30,1.352,31,1.352,32,2.139,33,2.139,34,1.081,35,2.871,36,2.139,37,2.139,38,2.139,39,1.664,40,2.782,41,2.139,42,2.139,43,0.868,44,1.66,45,2.5,46,1.58,47,2.5,48,2.782,49,2.5,50,2.5,51,2.5,52,2.5,53,2.5,54,2.5,55,3.008,56,2.5,57,1.66,58,1.66,59,0.772,60,0.992,61,1.455,62,1.945,63,1.455,64,1.347,65,0.992,66,1.049,67,1.049,68,1.66,69,1.352,70,0.868,71,0.074,72,1.089,73,0.645,74,0.868,75,2.139,76,0.992,77,2.5,78,0.992,79,2.139,80,0.992,81,1.66,82,1.66,83,3.193,84,2.165,85,1.66,86,1.037,87,0.992,88,1.66,89,1.089,90,1.66,91,0.723,92,0.742,93,2.139,94,0.616,95,1.757,96,2.871,97,0.992,98,2.782,99,0.723,100,2.139,101,1.66,102,1.66,103,1.66,104,1.049,105,1.66,106,1.58,107,1.945,108,1.291,109,0.992,110,2.5,111,0.992,112,1.66,113,1.66,114,0.992,115,1.66,116,1.66,117,2.485,118,0.992,119,1.455,120,1.66,121,1.66,122,1.66,123,1.66,124,0.992,125,3.193,126,1.66,127,0.992,128,1.66,129,1.66,130,1.049,131,0.992,132,2.5,133,0.992,134,1.352,135,0.992,136,1.66,137,1.66,138,1.66,139,1.66,140,0.992,141,1.66,142,1.66,143,1.66,144,1.66,145,0.992,146,1.66,147,0.992,148,2.782,149,1.66,150,1.66,151,1.307,152,3.008,153,0.992,154,1.66,155,0.992,156,1.58,157,0.992,158,0.992,159,0.992,160,0.992,161,0.992,162,0.992,163,0.992,164,1.66,165,1.846,166,1.276,167,1.573,168,1.307,169,0.91,170,1.66,171,2.139,172,1.459,173,1.307,174,2.139,175,1.66,176,1.66,177,0.992,178,1.212,179,0.992,180,0.992,181,0.992,182,0.992,183,0.992,184,0.992,185,0.992,186,1.212,187,0.992,188,0.992,189,0.519,190,0.409,191,1.16,192,0.528,193,0.36,194,0.245,195,0.245,196,0.245,197,0.777,198,0.432,199,0.627,200,0.992,201,0.992,202,0.409,203,0.076,204,1.66,205,1.66,206,1.307,207,2.08,208,0.992,209,0.992,210,2.139,211,0.992,212,1.66,213,0.992,214,0.992,215,0.992,216,0.992,217,0.992,218,0.992,219,2.139,220,2.5,221,2.5,222,0.992,223,2.139,224,1.66,225,0.992,226,0.627,227,0.992,228,0.992,229,0.992,230,1.66,231,0.992,232,0.992,233,0.992,234,0.992,235,0.992,236,0.992,237,1.66,238,1.66,239,0.992,240,0.992,241,0.992,242,0.992,243,0.992,244,0.992,245,0.992,246,0.992,247,0.992,248,0.528,249,0.36,250,0.992,251,0.992,252,1.66,253,2.139,254,1.352,255,2.139,256,1.66,257,1.66,258,2.139,259,0.992,260,0.992,261,0.992,262,0.992,263,0.992,264,0.992,265,1.66,266,1.66,267,0.992,268,0.992,269,2.5,270,2.139,271,0.992,272,0.992,273,1.66,274,0.992,275,2.139,276,0.992,277,1.66,278,1.66,279,0.992,280,1.089,281,0.992,282,0.992,283,0.992,284,0.992,285,0.992,286,1.66,287,1.049,288,1.352,289,0.992,290,0.992,291,0.992,292,0.992,293,0.992,294,2.139,295,0.992,296,0.992,297,0.992,298,0.992,299,0.992,300,0.992,301,0.992,302,0.992,303,0.992,304,0.992,305,0.992,306,0.992,307,0.992,308,0.299,309,0.519,310,0.992,311,0.992,312,0.992,313,0.992,314,0.432,315,0.992,316,0.992,317,0.992,318,0.992,319,0.992,320,0.992,321,0.868,322,0.992,323,2.139,324,0.992,325,0.432,326,1.66,327,0.992,328,0.992,329,1.049,330,1.66,331,0.519,332,1.66,333,1.307,334,1.66,335,0.992,336,0.992,337,1.66,338,1.66,339,0.992,340,2.5,341,0.992,342,0.992,343,0.992,344,0.015,345,0.024,346,0.015]],["title/interfaces/ITetromino.html",[166,0.722,347,1.045]],["body/interfaces/ITetromino.html",[3,0.562,4,0.452,9,0.452,11,0.992,12,1.986,15,1.986,26,0.353,27,1.141,30,1.986,31,1.439,46,1.439,66,1.439,67,1.439,69,1.439,71,0.074,73,0.601,86,1.161,89,0.992,92,0.775,94,0.601,95,0.992,104,1.986,106,1.439,119,2.028,130,1.439,134,1.439,156,2.451,165,0.992,166,1.298,167,2.297,168,1.191,169,1.038,172,1.943,173,1.191,178,1.986,186,0.992,194,0.562,195,0.562,198,0.992,202,0.957,203,0.144,206,2.028,207,2.2,226,1.439,248,0.775,280,0.992,287,1.986,288,1.439,308,0.685,329,2.572,344,0.034,345,0.046,346,0.034,347,1.69,348,2.277,349,1.439,350,3.166,351,3.018,352,1.191,353,1.772,354,1.772,355,1.772,356,1.772,357,2.799,358,1.772,359,0.992,360,2.445,361,1.772,362,2.445,363,1.772,364,2.799,365,1.772,366,2.445,367,2.799,368,2.445,369,1.772,370,2.445,371,1.772,372,1.772,373,1.772,374,1.772,375,1.772,376,1.772,377,1.772,378,1.439,379,1.772,380,1.772,381,1.772,382,1.772,383,1.772,384,2.445,385,1.772,386,1.772]],["title/injectables/IsOnEdge.html",[61,1.254,387,1.045]],["body/injectables/IsOnEdge.html",[3,0.574,4,0.462,9,0.462,11,1.014,13,2.482,17,1.217,21,3.046,26,0.36,34,0.96,35,1.811,43,1.668,61,2.144,64,1.275,70,2.214,71,0.073,72,1.845,73,0.656,74,2.214,86,1.191,89,1.39,92,0.897,94,0.494,95,1.924,107,1.811,108,1.811,117,3.527,119,1.668,165,1.014,166,1.178,167,2.309,168,1.217,172,1.787,173,1.217,186,1.585,189,1.217,190,0.574,192,0.574,196,0.574,198,1.014,199,1.471,202,0.787,203,0.146,206,1.668,207,1.668,280,1.787,344,0.034,345,0.047,346,0.034,352,1.668,378,2.016,387,1.39,388,1.471,389,1.811,390,3.189,391,3.189,392,3.189,393,3.189,394,3.189,395,3.189,396,3.189,397,3.189,398,3.189,399,3.189,400,3.189,401,2.327,402,2.327,403,4.101,404,2.327,405,2.327,406,2.327,407,2.327,408,2.327,409,3.189,410,2.327,411,3.189,412,3.189,413,3.189,414,2.327,415,3.189,416,3.189,417,3.189,418,2.327,419,2.327,420,2.327,421,2.327,422,2.327,423,3.189,424,2.327,425,1.811,426,1.811,427,2.327,428,3.189,429,2.327,430,3.189,431,2.327,432,2.327,433,2.327,434,2.327]],["title/classes/KEYS.html",[193,0.871,203,0.11]],["body/classes/KEYS.html",[3,0.503,4,0.405,9,0.405,26,0.316,27,1.056,34,0.614,64,1.223,71,0.073,73,0.629,86,1.002,91,1.77,92,1.002,94,0.755,99,1.477,151,2.564,169,1.002,190,0.503,191,0.741,192,0.503,193,1.056,194,0.503,195,0.503,196,0.503,197,0.741,202,1.073,203,0.155,248,0.964,249,1.475,308,1.176,309,1.067,314,0.889,321,1.067,325,1.702,331,1.772,333,1.772,344,0.03,345,0.043,346,0.03,359,1.77,435,0.889,436,0.889,437,3.099,438,2.142,439,2.142,440,2.142,441,2.142,442,1.838,443,2.04,444,1.838,445,2.04,446,1.838,447,2.04,448,1.838,449,2.04,450,1.838,451,2.04,452,1.838,453,2.04,454,1.067,455,1.067,456,1.067,457,1.067,458,1.067,459,1.067,460,1.067,461,2.043,462,2.043,463,1.267,464,1.772,465,1.289,466,1.838,467,1.289,468,1.838,469,1.289,470,1.289,471,1.838,472,1.289,473,1.289,474,1.289,475,1.289,476,1.289,477,1.289,478,1.289,479,1.289,480,1.289,481,1.289,482,2.142,483,1.289,484,1.289,485,1.289,486,2.142,487,1.289,488,1.289,489,1.289,490,1.772,491,1.289,492,1.289,493,1.289,494,1.289,495,1.289]],["title/classes/LEVEL.html",[34,0.722,203,0.11]],["body/classes/LEVEL.html",[3,0.396,4,0.318,9,0.318,26,0.248,27,0.885,34,0.733,64,1.383,71,0.073,73,0.712,86,1.133,91,2.002,92,1.133,94,0.745,99,1.542,151,2.575,169,0.984,190,0.396,191,0.582,192,0.396,193,0.582,194,0.396,195,0.396,196,0.396,197,0.582,202,1.008,203,0.135,248,0.955,249,1.449,308,1.165,309,1.54,314,0.699,321,0.839,325,1.687,331,0.839,333,0.839,344,0.024,345,0.036,346,0.024,359,1.623,435,0.699,436,0.699,437,3.112,438,1.014,439,1.014,440,1.014,441,1.014,442,1.014,444,1.014,446,1.014,448,1.014,450,1.014,452,1.014,454,0.839,455,0.839,456,0.839,457,0.839,458,0.839,459,0.839,460,0.839,461,2.024,462,2.024,463,1.434,464,1.85,465,1.014,466,1.862,467,1.014,468,1.862,469,1.014,470,1.014,471,1.862,472,1.014,473,1.014,474,1.54,475,1.54,476,1.54,477,1.54,478,1.54,479,1.54,480,1.54,481,1.862,482,2.354,483,1.862,484,1.862,485,1.862,486,2.354,487,1.862,488,1.862,489,1.862,490,1.948,491,1.862,492,1.862,493,1.862,494,1.014,495,1.014,496,1.604,497,1.604,498,1.604,499,1.604,500,1.604,501,1.604,502,1.604,503,1.604,504,1.604,505,1.604,506,1.604,507,1.604,508,1.604,509,1.604,510,1.604,511,1.604,512,1.604,513,1.604,514,1.604,515,1.604,516,1.604]],["title/classes/PUNKTE.html",[196,0.591,203,0.11]],["body/classes/PUNKTE.html",[3,0.503,4,0.405,9,0.405,26,0.316,27,1.056,34,0.614,64,1.223,71,0.073,73,0.629,86,1.002,91,1.77,92,1.002,94,0.755,99,1.477,151,2.564,169,1.031,190,0.503,191,0.741,192,0.503,193,0.741,194,0.503,195,0.503,196,0.717,197,0.741,202,1.073,203,0.155,248,0.964,249,1.518,308,1.176,309,1.067,314,0.889,321,1.772,325,1.702,331,1.067,333,1.067,344,0.03,345,0.043,346,0.03,359,1.77,435,0.889,436,0.889,437,3.099,438,1.289,439,1.289,440,1.289,441,1.289,442,1.289,444,1.289,446,1.289,448,1.289,450,1.289,452,1.289,454,1.067,455,1.067,456,1.067,457,1.067,458,1.067,459,1.067,460,1.067,461,2.043,462,2.043,463,1.267,464,1.772,465,2.142,466,2.142,467,2.142,468,2.142,469,2.142,470,1.838,471,2.142,472,2.142,473,2.142,474,1.289,475,1.289,476,1.289,477,1.289,478,1.289,479,1.289,480,1.289,481,1.289,482,2.142,483,1.289,484,1.289,485,1.289,486,2.142,487,1.289,488,1.289,489,1.289,490,1.772,491,1.289,492,1.289,493,1.289,494,1.289,495,1.289,517,2.04,518,2.04,519,2.04,520,2.04,521,2.04,522,2.04]],["title/classes/Tetromino.html",[178,1.045,203,0.11]],["body/classes/Tetromino.html",[3,0.493,4,0.397,9,0.397,11,0.871,12,1.263,15,2.118,17,1.045,26,0.31,27,1.041,30,2.118,31,1.812,43,1.499,46,2.314,59,1.555,64,1.322,66,1.812,67,1.812,69,1.812,70,1.914,71,0.074,72,1.595,73,0.658,74,1.914,86,1.14,89,1.249,92,0.707,94,0.567,95,1.758,96,2.849,104,1.263,106,1.812,119,2.223,130,1.812,134,1.812,156,2.686,165,1.249,166,1.303,167,2.173,168,1.045,169,0.995,172,1.852,173,1.045,178,1.957,186,0.871,194,0.493,195,0.493,198,0.871,202,0.903,203,0.131,206,1.914,207,2.109,226,1.263,248,0.707,280,0.871,287,1.812,288,1.263,308,0.602,329,2.314,344,0.029,345,0.042,346,0.029,347,1.46,349,1.263,350,2.849,351,2.608,352,1.499,353,2.231,354,2.231,355,1.555,356,2.231,357,3.139,358,2.849,359,0.871,360,2.231,361,1.555,362,2.231,363,1.555,364,2.608,365,1.555,366,2.231,367,2.608,368,2.849,369,2.231,370,2.231,371,1.555,372,2.231,373,1.555,374,1.555,375,1.555,376,1.555,377,1.555,378,1.812,379,2.231,380,1.555,381,2.231,382,2.231,383,2.231,384,2.608,385,2.231,386,1.555,435,0.871,523,2.867,524,2.867,525,2.867,526,1.999,527,2.867,528,1.999,529,1.999,530,1.999,531,1.999,532,1.999,533,1.999,534,1.999,535,1.999]],["title/injectables/TetromisRotation.html",[63,1.254,387,1.045]],["body/injectables/TetromisRotation.html",[3,0.781,4,0.628,9,0.628,11,1.379,17,1.655,26,0.49,39,2.463,43,2.037,62,3.032,63,2.207,64,0.953,70,1.655,71,0.073,72,1.379,73,0.49,74,1.655,84,3.032,89,1.698,94,0.49,95,1.379,165,1.698,166,1.404,172,1.698,186,1.839,189,1.655,190,0.781,192,0.781,196,0.781,198,1.379,199,2.001,202,0.961,203,0.178,280,1.379,344,0.047,345,0.057,346,0.047,352,2.037,387,1.698,388,2.001,425,2.463,426,2.463,536,2.463,537,3.896,538,3.896,539,3.896,540,3.896,541,3.896,542,3.896,543,3.165,544,3.165,545,3.165]],["title/coverage.html",[546,2.533]],["body/coverage.html",[0,1.382,1,2.004,9,0.629,10,2.468,34,0.955,61,1.658,63,1.658,71,0.072,73,0.491,94,0.736,166,0.955,178,1.382,190,0.782,191,1.152,192,0.782,193,1.152,194,0.782,195,0.782,196,0.782,197,1.152,203,0.202,254,2.004,344,0.047,345,0.057,346,0.047,347,1.382,349,2.465,387,1.7,389,2.468,436,2.07,463,1.382,490,2.04,536,2.468,546,2.468,547,3.171,548,3.171,549,3.171,550,3.171,551,3.901,552,3.171,553,4.607,554,4.607,555,3.171,556,3.171,557,3.171,558,3.171,559,3.171,560,3.171,561,3.171,562,3.171]],["title/dependencies.html",[563,2.011,564,2.24]],["body/dependencies.html",[71,0.072,189,1.842,344,0.052,345,0.061,346,0.052,564,2.741,565,3.522,566,4.803,567,3.522,568,3.522,569,3.522,570,4.155,571,4.155,572,3.522,573,3.522,574,3.522,575,3.522,576,3.522,577,3.522,578,3.522,579,3.522,580,3.522,581,3.522]],["title/index.html",[26,0.311,582,2.011,583,2.011]],["body/index.html",[0,1.842,4,0.63,20,2.473,71,0.057,72,1.384,254,2.008,344,0.047,345,0.057,346,0.047,584,3.177,585,3.905,586,3.177,587,4.228,588,4.228,589,3.177,590,3.177,591,3.177,592,3.905,593,4.528,594,4.669,595,3.177,596,3.177,597,3.177,598,3.177,599,3.177,600,3.177,601,3.177,602,3.177,603,3.177,604,3.177,605,4.228,606,4.228,607,3.177,608,4.528,609,3.177,610,3.177,611,3.177,612,3.177,613,3.177,614,3.177,615,3.177,616,3.905,617,3.905,618,4.41,619,3.177,620,3.905,621,3.905,622,3.177,623,4.41,624,3.177,625,3.177,626,3.177,627,4.228,628,3.177,629,3.177,630,3.177,631,3.177,632,3.177]],["title/modules.html",[633,2.533]],["body/modules.html",[71,0.064,344,0.056,345,0.064,346,0.056,633,2.984]],["title/overview.html",[634,2.533]],["body/overview.html",[0,1.641,71,0.064,169,1.066,248,0.929,249,1.368,344,0.055,345,0.064,346,0.055,347,1.641,388,2.38,435,1.641,634,2.931]],["title/miscellaneous/variables.html",[635,1.565,636,2.24]],["body/miscellaneous/variables.html",[26,0.451,71,0.072,73,0.699,86,1.055,91,1.965,92,1.113,94,0.769,99,1.612,169,1.055,190,0.913,191,1.344,192,0.913,194,0.913,195,0.913,197,1.344,248,1.055,249,1.553,308,1.287,314,1.27,325,1.863,344,0.043,345,0.054,346,0.043,436,1.27,454,1.524,455,1.524,456,1.524,457,1.524,458,1.524,459,1.524,460,1.524,461,2.236,462,2.236,463,1.27,464,1.524,635,2.268,636,2.268,637,4.511]]],"invertedIndex":[["",{"_index":71,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":94,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.9.1",{"_index":581,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":554,"title":{},"body":{"coverage.html":{}}}],["0/22",{"_index":552,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":551,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":169,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.10.0",{"_index":579,"title":{},"body":{"dependencies.html":{}}}],["1.2",{"_index":310,"title":{},"body":{"components/BoardComponent.html":{}}}],["1.8",{"_index":317,"title":{},"body":{"components/BoardComponent.html":{}}}],["1/2",{"_index":557,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":560,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":99,"title":{},"body":{"components/BoardComponent.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":466,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["11",{"_index":483,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["12",{"_index":484,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["13",{"_index":485,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["130",{"_index":480,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["14",{"_index":487,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["15",{"_index":488,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["16",{"_index":489,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["16/32",{"_index":550,"title":{},"body":{"coverage.html":{}}}],["17",{"_index":491,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["18",{"_index":492,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["19",{"_index":493,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["1px",{"_index":312,"title":{},"body":{"components/BoardComponent.html":{}}}],["2",{"_index":249,"title":{},"body":{"components/BoardComponent.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["20",{"_index":463,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["20ms",{"_index":495,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["220",{"_index":479,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["27",{"_index":444,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["29",{"_index":494,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["3",{"_index":308,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"miscellaneous/variables.html":{}}}],["30",{"_index":464,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"miscellaneous/variables.html":{}}}],["300",{"_index":468,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["32",{"_index":450,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["35",{"_index":332,"title":{},"body":{"components/BoardComponent.html":{}}}],["37",{"_index":446,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["38",{"_index":452,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["380",{"_index":478,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["39",{"_index":448,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["4",{"_index":248,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["4.4.1",{"_index":575,"title":{},"body":{"dependencies.html":{}}}],["40",{"_index":442,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["470",{"_index":477,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["5",{"_index":325,"title":{},"body":{"components/BoardComponent.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"miscellaneous/variables.html":{}}}],["50",{"_index":490,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"coverage.html":{}}}],["500",{"_index":470,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["550",{"_index":476,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["6",{"_index":461,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"miscellaneous/variables.html":{}}}],["6.4.0",{"_index":577,"title":{},"body":{"dependencies.html":{}}}],["6/7",{"_index":556,"title":{},"body":{"coverage.html":{}}}],["63",{"_index":558,"title":{},"body":{"coverage.html":{}}}],["630",{"_index":475,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["7",{"_index":462,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"miscellaneous/variables.html":{}}}],["7/11",{"_index":559,"title":{},"body":{"coverage.html":{}}}],["70",{"_index":486,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["720",{"_index":474,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["8",{"_index":309,"title":{},"body":{"components/BoardComponent.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["8.2.14",{"_index":566,"title":{},"body":{"dependencies.html":{}}}],["8.3.20",{"_index":590,"title":{},"body":{"index.html":{}}}],["80",{"_index":482,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["800",{"_index":471,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["85",{"_index":555,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":481,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["abbrechen",{"_index":264,"title":{},"body":{"components/BoardComponent.html":{}}}],["abhollen",{"_index":216,"title":{},"body":{"components/BoardComponent.html":{}}}],["abovefloor",{"_index":395,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["abovefloor(y",{"_index":401,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["abwärts",{"_index":115,"title":{},"body":{"components/BoardComponent.html":{}}}],["actual_component",{"_index":343,"title":{},"body":{"components/BoardComponent.html":{}}}],["alle",{"_index":240,"title":{},"body":{"components/BoardComponent.html":{}}}],["als",{"_index":538,"title":{},"body":{"injectables/TetromisRotation.html":{}}}],["angekommen",{"_index":123,"title":{},"body":{"components/BoardComponent.html":{}}}],["angular",{"_index":587,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":565,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":567,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":568,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":189,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{},"injectables/TetromisRotation.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":569,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":570,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":573,"title":{},"body":{"dependencies.html":{}}}],["angulartetris",{"_index":584,"title":{},"body":{"index.html":{}}}],["animate",{"_index":44,"title":{},"body":{"components/BoardComponent.html":{}}}],["animate(now",{"_index":85,"title":{},"body":{"components/BoardComponent.html":{}}}],["animation",{"_index":263,"title":{},"body":{"components/BoardComponent.html":{}}}],["animationsloop",{"_index":88,"title":{},"body":{"components/BoardComponent.html":{}}}],["animiert",{"_index":267,"title":{},"body":{"components/BoardComponent.html":{}}}],["app",{"_index":20,"title":{},"body":{"components/BoardComponent.html":{},"index.html":{}}}],["arguments",{"_index":76,"title":{},"body":{"components/BoardComponent.html":{}}}],["arial",{"_index":313,"title":{},"body":{"components/BoardComponent.html":{}}}],["array(cols).fill(0",{"_index":320,"title":{},"body":{"components/BoardComponent.html":{}}}],["array.from",{"_index":318,"title":{},"body":{"components/BoardComponent.html":{}}}],["artifacts",{"_index":609,"title":{},"body":{"index.html":{}}}],["auf",{"_index":139,"title":{},"body":{"components/BoardComponent.html":{}}}],["aus",{"_index":236,"title":{},"body":{"components/BoardComponent.html":{}}}],["ausrechnen",{"_index":246,"title":{},"body":{"components/BoardComponent.html":{}}}],["automatically",{"_index":599,"title":{},"body":{"index.html":{}}}],["beenden",{"_index":294,"title":{},"body":{"components/BoardComponent.html":{}}}],["bei",{"_index":98,"title":{},"body":{"components/BoardComponent.html":{}}}],["ber",{"_index":404,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["besetzt",{"_index":422,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["bewegt",{"_index":378,"title":{},"body":{"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{}}}],["bewegung",{"_index":116,"title":{},"body":{"components/BoardComponent.html":{}}}],["black",{"_index":306,"title":{},"body":{"components/BoardComponent.html":{}}}],["block",{"_index":119,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{}}}],["block_size",{"_index":191,"title":{},"body":{"components/BoardComponent.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["blocktyp",{"_index":382,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["blue",{"_index":456,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"miscellaneous/variables.html":{}}}],["blöcke",{"_index":84,"title":{},"body":{"components/BoardComponent.html":{},"injectables/TetromisRotation.html":{}}}],["blöcken",{"_index":100,"title":{},"body":{"components/BoardComponent.html":{}}}],["board",{"_index":21,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{}}}],["board.component.css",{"_index":23,"title":{},"body":{"components/BoardComponent.html":{}}}],["board.component.html",{"_index":25,"title":{},"body":{"components/BoardComponent.html":{}}}],["boardcomponent",{"_index":1,"title":{"components/BoardComponent.html":{}},"body":{"components/BoardComponent.html":{},"coverage.html":{}}}],["boardes",{"_index":113,"title":{},"body":{"components/BoardComponent.html":{}}}],["boden",{"_index":406,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["boolean",{"_index":117,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{}}}],["bootstrap",{"_index":574,"title":{},"body":{"dependencies.html":{}}}],["border",{"_index":326,"title":{},"body":{"components/BoardComponent.html":{}}}],["browser",{"_index":571,"title":{},"body":{"dependencies.html":{}}}],["build",{"_index":608,"title":{},"body":{"index.html":{}}}],["button",{"_index":141,"title":{},"body":{"components/BoardComponent.html":{}}}],["cancelanimationframe(this.requestid",{"_index":266,"title":{},"body":{"components/BoardComponent.html":{}}}],["canvas",{"_index":28,"title":{},"body":{"components/BoardComponent.html":{}}}],["canvasnext",{"_index":29,"title":{},"body":{"components/BoardComponent.html":{}}}],["canvasrenderingcontext2d",{"_index":156,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["change",{"_index":601,"title":{},"body":{"index.html":{}}}],["check",{"_index":630,"title":{},"body":{"index.html":{}}}],["class",{"_index":203,"title":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{}},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{},"coverage.html":{}}}],["classes",{"_index":435,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"overview.html":{}}}],["clearlines",{"_index":45,"title":{},"body":{"components/BoardComponent.html":{}}}],["cli",{"_index":588,"title":{},"body":{"index.html":{}}}],["code",{"_index":603,"title":{},"body":{"index.html":{}}}],["color",{"_index":329,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["cols",{"_index":190,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"injectables/TetromisRotation.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["column",{"_index":334,"title":{},"body":{"components/BoardComponent.html":{}}}],["component",{"_index":0,"title":{"components/BoardComponent.html":{}},"body":{"components/BoardComponent.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["component_template",{"_index":341,"title":{},"body":{"components/BoardComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/BoardComponent.html":{}}}],["const",{"_index":359,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{}}}],["constants",{"_index":198,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{}}}],["constructor",{"_index":59,"title":{},"body":{"components/BoardComponent.html":{},"classes/Tetromino.html":{}}}],["constructor(ctx",{"_index":526,"title":{},"body":{"classes/Tetromino.html":{}}}],["constructor(edge",{"_index":60,"title":{},"body":{"components/BoardComponent.html":{}}}],["constructor(private",{"_index":226,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["coverage",{"_index":546,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["ctx",{"_index":30,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["ctxnext",{"_index":31,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["ctxnext.canvas.height",{"_index":375,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["ctxnext.canvas.width",{"_index":374,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["ctxnext.clearrect(0",{"_index":373,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["ctxnext.fillrect(x",{"_index":377,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["ctxnext.fillstyle",{"_index":376,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["cyan",{"_index":455,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"miscellaneous/variables.html":{}}}],["dach",{"_index":296,"title":{},"body":{"components/BoardComponent.html":{}}}],["das",{"_index":13,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{}}}],["dass",{"_index":540,"title":{},"body":{"injectables/TetromisRotation.html":{}}}],["decorators",{"_index":149,"title":{},"body":{"components/BoardComponent.html":{}}}],["default",{"_index":91,"title":{},"body":{"components/BoardComponent.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":64,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{}}}],["dem",{"_index":405,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["den",{"_index":106,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["dependencies",{"_index":564,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["der",{"_index":89,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{}}}],["des",{"_index":112,"title":{},"body":{"components/BoardComponent.html":{}}}],["description",{"_index":11,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{}}}],["dev",{"_index":596,"title":{},"body":{"index.html":{}}}],["development",{"_index":591,"title":{},"body":{"index.html":{}}}],["die",{"_index":83,"title":{},"body":{"components/BoardComponent.html":{}}}],["directive",{"_index":339,"title":{},"body":{"components/BoardComponent.html":{}}}],["directives",{"_index":342,"title":{},"body":{"components/BoardComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":607,"title":{},"body":{"index.html":{}}}],["directory",{"_index":612,"title":{},"body":{"index.html":{}}}],["dist",{"_index":611,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":547,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":7,"title":{},"body":{"components/BoardComponent.html":{}}}],["double",{"_index":467,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["down",{"_index":438,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["draw",{"_index":46,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["drawboard",{"_index":47,"title":{},"body":{"components/BoardComponent.html":{}}}],["drawnext",{"_index":523,"title":{},"body":{"classes/Tetromino.html":{}}}],["drawnext(ctxnext",{"_index":372,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["drop",{"_index":48,"title":{},"body":{"components/BoardComponent.html":{}}}],["dropbewegung",{"_index":90,"title":{},"body":{"components/BoardComponent.html":{}}}],["dx",{"_index":430,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["dy",{"_index":428,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["dynamic",{"_index":572,"title":{},"body":{"dependencies.html":{}}}],["e2e",{"_index":624,"title":{},"body":{"index.html":{}}}],["edge",{"_index":75,"title":{},"body":{"components/BoardComponent.html":{}}}],["edge.service",{"_index":200,"title":{},"body":{"components/BoardComponent.html":{}}}],["einander",{"_index":102,"title":{},"body":{"components/BoardComponent.html":{}}}],["eine",{"_index":67,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["einem",{"_index":392,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["einen",{"_index":357,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["einer",{"_index":411,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["einfrieren",{"_index":120,"title":{},"body":{"components/BoardComponent.html":{}}}],["elapsed",{"_index":205,"title":{},"body":{"components/BoardComponent.html":{}}}],["element",{"_index":338,"title":{},"body":{"components/BoardComponent.html":{}}}],["elementref",{"_index":148,"title":{},"body":{"components/BoardComponent.html":{}}}],["end",{"_index":623,"title":{},"body":{"index.html":{}}}],["erhöhen",{"_index":108,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{}}}],["ermöglicht",{"_index":537,"title":{},"body":{"injectables/TetromisRotation.html":{}}}],["erreicht",{"_index":297,"title":{},"body":{"components/BoardComponent.html":{}}}],["erstellen",{"_index":130,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["erstellt",{"_index":66,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["esc",{"_index":439,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["event",{"_index":77,"title":{},"body":{"components/BoardComponent.html":{}}}],["event.keycode",{"_index":210,"title":{},"body":{"components/BoardComponent.html":{}}}],["event.preventdefault",{"_index":214,"title":{},"body":{"components/BoardComponent.html":{}}}],["example",{"_index":17,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{}}}],["execute",{"_index":620,"title":{},"body":{"index.html":{}}}],["export",{"_index":202,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{}}}],["falls",{"_index":295,"title":{},"body":{"components/BoardComponent.html":{}}}],["false",{"_index":275,"title":{},"body":{"components/BoardComponent.html":{}}}],["farbe",{"_index":369,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["farben",{"_index":194,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["farben[typeid",{"_index":365,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["farben[value",{"_index":289,"title":{},"body":{"components/BoardComponent.html":{}}}],["felder",{"_index":416,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["file",{"_index":9,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{},"coverage.html":{}}}],["files",{"_index":602,"title":{},"body":{"index.html":{}}}],["finden",{"_index":417,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["flag",{"_index":614,"title":{},"body":{"index.html":{}}}],["float",{"_index":335,"title":{},"body":{"components/BoardComponent.html":{}}}],["formen",{"_index":195,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["formen[typeid",{"_index":363,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["freeze",{"_index":49,"title":{},"body":{"components/BoardComponent.html":{}}}],["further",{"_index":626,"title":{},"body":{"index.html":{}}}],["für",{"_index":12,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["gameover",{"_index":50,"title":{},"body":{"components/BoardComponent.html":{}}}],["gamestarted",{"_index":32,"title":{},"body":{"components/BoardComponent.html":{}}}],["generate",{"_index":605,"title":{},"body":{"index.html":{}}}],["generated",{"_index":586,"title":{},"body":{"index.html":{}}}],["generieren",{"_index":383,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["getemptyboard",{"_index":51,"title":{},"body":{"components/BoardComponent.html":{}}}],["getlinesclearedpoints",{"_index":396,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["getlinesclearedpoints(lines",{"_index":407,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["getting",{"_index":582,"title":{"index.html":{}},"body":{}}],["gleicher",{"_index":260,"title":{},"body":{"components/BoardComponent.html":{}}}],["go",{"_index":629,"title":{},"body":{"index.html":{}}}],["green",{"_index":459,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"miscellaneous/variables.html":{}}}],["grid",{"_index":322,"title":{},"body":{"components/BoardComponent.html":{}}}],["grösse",{"_index":245,"title":{},"body":{"components/BoardComponent.html":{}}}],["grössen",{"_index":235,"title":{},"body":{"components/BoardComponent.html":{}}}],["hard",{"_index":218,"title":{},"body":{"components/BoardComponent.html":{}}}],["hard_drop",{"_index":473,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["help",{"_index":627,"title":{},"body":{"index.html":{}}}],["highscore",{"_index":33,"title":{},"body":{"components/BoardComponent.html":{}}}],["hostlistener",{"_index":188,"title":{},"body":{"components/BoardComponent.html":{}}}],["hostlistener('window:keydown",{"_index":208,"title":{},"body":{"components/BoardComponent.html":{}}}],["hostlisteners",{"_index":57,"title":{},"body":{"components/BoardComponent.html":{}}}],["html",{"_index":337,"title":{},"body":{"components/BoardComponent.html":{}}}],["http://localhost:4200",{"_index":598,"title":{},"body":{"index.html":{}}}],["id",{"_index":262,"title":{},"body":{"components/BoardComponent.html":{}}}],["identifier",{"_index":548,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":15,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["import",{"_index":186,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{}}}],["index",{"_index":26,"title":{"index.html":{}},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{}}}],["initboard",{"_index":52,"title":{},"body":{"components/BoardComponent.html":{}}}],["initialisiert",{"_index":132,"title":{},"body":{"components/BoardComponent.html":{}}}],["initialisierung",{"_index":138,"title":{},"body":{"components/BoardComponent.html":{}}}],["initnext",{"_index":53,"title":{},"body":{"components/BoardComponent.html":{}}}],["injectable",{"_index":387,"title":{"injectables/IsOnEdge.html":{},"injectables/TetromisRotation.html":{}},"body":{"injectables/IsOnEdge.html":{},"injectables/TetromisRotation.html":{},"coverage.html":{}}}],["injectables",{"_index":388,"title":{},"body":{"injectables/IsOnEdge.html":{},"injectables/TetromisRotation.html":{},"overview.html":{}}}],["insidewalls",{"_index":397,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["insidewalls(x",{"_index":409,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["instant",{"_index":353,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["instanz",{"_index":68,"title":{},"body":{"components/BoardComponent.html":{}}}],["interface",{"_index":347,"title":{"interfaces/ITetromino.html":{}},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":348,"title":{},"body":{"interfaces/ITetromino.html":{}}}],["isempty",{"_index":398,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["isempty(value",{"_index":413,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["isonedge",{"_index":61,"title":{"injectables/IsOnEdge.html":{}},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{},"coverage.html":{}}}],["itetromino",{"_index":166,"title":{"interfaces/ITetromino.html":{}},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{},"coverage.html":{}}}],["json.parse(json.stringify(piece",{"_index":544,"title":{},"body":{"injectables/TetromisRotation.html":{}}}],["karma",{"_index":622,"title":{},"body":{"index.html":{}}}],["keyboardevent",{"_index":79,"title":{},"body":{"components/BoardComponent.html":{}}}],["keyevent(event",{"_index":209,"title":{},"body":{"components/BoardComponent.html":{}}}],["keys",{"_index":193,"title":{"classes/KEYS.html":{}},"body":{"components/BoardComponent.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"coverage.html":{}}}],["keys.down",{"_index":171,"title":{},"body":{"components/BoardComponent.html":{}}}],["keys.esc",{"_index":211,"title":{},"body":{"components/BoardComponent.html":{}}}],["keys.left",{"_index":164,"title":{},"body":{"components/BoardComponent.html":{}}}],["keys.right",{"_index":170,"title":{},"body":{"components/BoardComponent.html":{}}}],["keys.space",{"_index":174,"title":{},"body":{"components/BoardComponent.html":{}}}],["keys.up",{"_index":175,"title":{},"body":{"components/BoardComponent.html":{}}}],["klasse",{"_index":352,"title":{},"body":{"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{}}}],["leere",{"_index":415,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["leeres",{"_index":128,"title":{},"body":{"components/BoardComponent.html":{}}}],["left",{"_index":331,"title":{},"body":{"components/BoardComponent.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["legalen",{"_index":393,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["legend",{"_index":336,"title":{},"body":{"components/BoardComponent.html":{}}}],["length",{"_index":319,"title":{},"body":{"components/BoardComponent.html":{}}}],["level",{"_index":34,"title":{"classes/LEVEL.html":{}},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"coverage.html":{}}}],["level[this.level",{"_index":273,"title":{},"body":{"components/BoardComponent.html":{}}}],["lines",{"_index":35,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{}}}],["lines_per_level",{"_index":197,"title":{},"body":{"components/BoardComponent.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["linie",{"_index":103,"title":{},"body":{"components/BoardComponent.html":{}}}],["literal",{"_index":184,"title":{},"body":{"components/BoardComponent.html":{}}}],["löschen",{"_index":104,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["margin",{"_index":323,"title":{},"body":{"components/BoardComponent.html":{}}}],["matching",{"_index":345,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["math.floor(math.random",{"_index":386,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["matrix",{"_index":129,"title":{},"body":{"components/BoardComponent.html":{}}}],["memberof",{"_index":207,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{}}}],["metadata",{"_index":18,"title":{},"body":{"components/BoardComponent.html":{}}}],["methode",{"_index":403,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["methoden",{"_index":137,"title":{},"body":{"components/BoardComponent.html":{}}}],["methods",{"_index":43,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{}}}],["miscellaneous",{"_index":635,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["modules",{"_index":633,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":628,"title":{},"body":{"index.html":{}}}],["move",{"_index":524,"title":{},"body":{"classes/Tetromino.html":{}}}],["move(p",{"_index":379,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["moves",{"_index":36,"title":{},"body":{"components/BoardComponent.html":{}}}],["name",{"_index":72,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{},"index.html":{}}}],["navigate",{"_index":597,"title":{},"body":{"index.html":{}}}],["neben",{"_index":101,"title":{},"body":{"components/BoardComponent.html":{}}}],["neuer",{"_index":215,"title":{},"body":{"components/BoardComponent.html":{}}}],["new",{"_index":254,"title":{},"body":{"components/BoardComponent.html":{},"coverage.html":{},"index.html":{}}}],["next",{"_index":37,"title":{},"body":{"components/BoardComponent.html":{}}}],["ng",{"_index":594,"title":{},"body":{"index.html":{}}}],["ngoninit",{"_index":54,"title":{},"body":{"components/BoardComponent.html":{}}}],["nicht",{"_index":421,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["none",{"_index":454,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"miscellaneous/variables.html":{}}}],["nooftypes",{"_index":384,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["notoccupied",{"_index":399,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["notoccupied(board",{"_index":418,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["now",{"_index":93,"title":{},"body":{"components/BoardComponent.html":{}}}],["now=0",{"_index":276,"title":{},"body":{"components/BoardComponent.html":{}}}],["number",{"_index":86,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"miscellaneous/variables.html":{}}}],["nächsten",{"_index":134,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["object",{"_index":163,"title":{},"body":{"components/BoardComponent.html":{}}}],["objekte",{"_index":241,"title":{},"body":{"components/BoardComponent.html":{}}}],["oninit",{"_index":16,"title":{},"body":{"components/BoardComponent.html":{}}}],["optional",{"_index":74,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{}}}],["orange",{"_index":457,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"miscellaneous/variables.html":{}}}],["ort",{"_index":394,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["out",{"_index":631,"title":{},"body":{"index.html":{}}}],["over",{"_index":316,"title":{},"body":{"components/BoardComponent.html":{}}}],["overview",{"_index":634,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":165,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{}}}],["p.shape",{"_index":380,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["p.shape.every((row",{"_index":427,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["p.x",{"_index":168,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{}}}],["p.y",{"_index":173,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{}}}],["package",{"_index":563,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":206,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{}}}],["parameters",{"_index":70,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{}}}],["paused",{"_index":38,"title":{},"body":{"components/BoardComponent.html":{}}}],["performance.now",{"_index":259,"title":{},"body":{"components/BoardComponent.html":{}}}],["pfeiltasten",{"_index":81,"title":{},"body":{"components/BoardComponent.html":{}}}],["piece",{"_index":39,"title":{},"body":{"components/BoardComponent.html":{},"injectables/TetromisRotation.html":{}}}],["play",{"_index":55,"title":{},"body":{"components/BoardComponent.html":{}}}],["points",{"_index":40,"title":{},"body":{"components/BoardComponent.html":{}}}],["private",{"_index":227,"title":{},"body":{"components/BoardComponent.html":{}}}],["prod",{"_index":613,"title":{},"body":{"index.html":{}}}],["production",{"_index":615,"title":{},"body":{"index.html":{}}}],["project",{"_index":585,"title":{},"body":{"index.html":{}}}],["properties",{"_index":27,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{}}}],["protractor",{"_index":625,"title":{},"body":{"index.html":{}}}],["providedin",{"_index":425,"title":{},"body":{"injectables/IsOnEdge.html":{},"injectables/TetromisRotation.html":{}}}],["punkte",{"_index":196,"title":{"classes/PUNKTE.html":{}},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"injectables/TetromisRotation.html":{},"coverage.html":{}}}],["punkte.hard_drop",{"_index":222,"title":{},"body":{"components/BoardComponent.html":{}}}],["punkte.soft_drop",{"_index":225,"title":{},"body":{"components/BoardComponent.html":{}}}],["purple",{"_index":460,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"miscellaneous/variables.html":{}}}],["randomizetetrominotype",{"_index":525,"title":{},"body":{"classes/Tetromino.html":{}}}],["randomizetetrominotype(nooftypes",{"_index":385,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["readme",{"_index":632,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":437,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["rechnet",{"_index":234,"title":{},"body":{"components/BoardComponent.html":{}}}],["red",{"_index":314,"title":{},"body":{"components/BoardComponent.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"miscellaneous/variables.html":{}}}],["reload",{"_index":600,"title":{},"body":{"index.html":{}}}],["request",{"_index":261,"title":{},"body":{"components/BoardComponent.html":{}}}],["requestanimationframe(this.animate.bind(this",{"_index":282,"title":{},"body":{"components/BoardComponent.html":{}}}],["requestid",{"_index":41,"title":{},"body":{"components/BoardComponent.html":{}}}],["resetgame",{"_index":56,"title":{},"body":{"components/BoardComponent.html":{}}}],["result",{"_index":344,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":346,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":280,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{}}}],["returns",{"_index":95,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{}}}],["right",{"_index":333,"title":{},"body":{"components/BoardComponent.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["root",{"_index":426,"title":{},"body":{"injectables/IsOnEdge.html":{},"injectables/TetromisRotation.html":{}}}],["rotate",{"_index":62,"title":{},"body":{"components/BoardComponent.html":{},"injectables/TetromisRotation.html":{}}}],["rotate(piece",{"_index":542,"title":{},"body":{"injectables/TetromisRotation.html":{}}}],["rotate.service",{"_index":201,"title":{},"body":{"components/BoardComponent.html":{}}}],["rotieren",{"_index":541,"title":{},"body":{"injectables/TetromisRotation.html":{}}}],["row.every((value",{"_index":429,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["row.every(value",{"_index":298,"title":{},"body":{"components/BoardComponent.html":{}}}],["row.foreach((value",{"_index":287,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["row.reverse",{"_index":545,"title":{},"body":{"injectables/TetromisRotation.html":{}}}],["rows",{"_index":192,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"injectables/TetromisRotation.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ruft",{"_index":136,"title":{},"body":{"components/BoardComponent.html":{}}}],["run",{"_index":593,"title":{},"body":{"index.html":{}}}],["running",{"_index":616,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":576,"title":{},"body":{"dependencies.html":{}}}],["scaffolding",{"_index":604,"title":{},"body":{"index.html":{}}}],["score",{"_index":107,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{}}}],["selector",{"_index":19,"title":{},"body":{"components/BoardComponent.html":{}}}],["serve",{"_index":595,"title":{},"body":{"index.html":{}}}],["server",{"_index":592,"title":{},"body":{"index.html":{}}}],["service",{"_index":539,"title":{},"body":{"injectables/TetromisRotation.html":{}}}],["shape",{"_index":350,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["sich",{"_index":391,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["single",{"_index":465,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["skaliert",{"_index":239,"title":{},"body":{"components/BoardComponent.html":{}}}],["soft_drop",{"_index":472,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["solid",{"_index":328,"title":{},"body":{"components/BoardComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{},"index.html":{}}}],["space",{"_index":440,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["spawn",{"_index":358,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["spawnt",{"_index":356,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["spiel",{"_index":125,"title":{},"body":{"components/BoardComponent.html":{}}}],["spielfeld",{"_index":14,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/.../constants.ts",{"_index":637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/board/board.component.ts",{"_index":10,"title":{},"body":{"components/BoardComponent.html":{},"coverage.html":{}}}],["src/app/board/board.component.ts:115",{"_index":133,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:131",{"_index":140,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:152",{"_index":145,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:168",{"_index":87,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:186",{"_index":109,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:197",{"_index":111,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:21",{"_index":153,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:214",{"_index":114,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:23",{"_index":155,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:237",{"_index":97,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:24",{"_index":157,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:25",{"_index":158,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:26",{"_index":147,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:262",{"_index":118,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:27",{"_index":181,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:277",{"_index":124,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:28",{"_index":179,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:29",{"_index":183,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:293",{"_index":127,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:30",{"_index":180,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:31",{"_index":159,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:32",{"_index":185,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:33",{"_index":182,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:34",{"_index":160,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:35",{"_index":162,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:36",{"_index":161,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:37",{"_index":177,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:52",{"_index":80,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:73",{"_index":65,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:88",{"_index":135,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:99",{"_index":131,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/constants.ts",{"_index":436,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/board/constants.ts:27",{"_index":445,"title":{},"body":{"classes/KEYS.html":{}}}],["src/app/board/constants.ts:28",{"_index":451,"title":{},"body":{"classes/KEYS.html":{}}}],["src/app/board/constants.ts:29",{"_index":447,"title":{},"body":{"classes/KEYS.html":{}}}],["src/app/board/constants.ts:30",{"_index":453,"title":{},"body":{"classes/KEYS.html":{}}}],["src/app/board/constants.ts:31",{"_index":449,"title":{},"body":{"classes/KEYS.html":{}}}],["src/app/board/constants.ts:32",{"_index":443,"title":{},"body":{"classes/KEYS.html":{}}}],["src/app/board/constants.ts:36",{"_index":519,"title":{},"body":{"classes/PUNKTE.html":{}}}],["src/app/board/constants.ts:37",{"_index":517,"title":{},"body":{"classes/PUNKTE.html":{}}}],["src/app/board/constants.ts:38",{"_index":522,"title":{},"body":{"classes/PUNKTE.html":{}}}],["src/app/board/constants.ts:39",{"_index":521,"title":{},"body":{"classes/PUNKTE.html":{}}}],["src/app/board/constants.ts:40",{"_index":520,"title":{},"body":{"classes/PUNKTE.html":{}}}],["src/app/board/constants.ts:41",{"_index":518,"title":{},"body":{"classes/PUNKTE.html":{}}}],["src/app/board/constants.ts:45",{"_index":496,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:46",{"_index":497,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:47",{"_index":508,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:48",{"_index":510,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:49",{"_index":511,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:50",{"_index":512,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:51",{"_index":513,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:52",{"_index":514,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:53",{"_index":515,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:54",{"_index":516,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:55",{"_index":498,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:56",{"_index":499,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:57",{"_index":500,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:58",{"_index":501,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:59",{"_index":502,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:60",{"_index":503,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:61",{"_index":504,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:62",{"_index":505,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:63",{"_index":506,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:64",{"_index":507,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/constants.ts:65",{"_index":509,"title":{},"body":{"classes/LEVEL.html":{}}}],["src/app/board/edge.service.ts",{"_index":389,"title":{},"body":{"injectables/IsOnEdge.html":{},"coverage.html":{}}}],["src/app/board/edge.service.ts:15",{"_index":424,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["src/app/board/edge.service.ts:37",{"_index":414,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["src/app/board/edge.service.ts:48",{"_index":410,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["src/app/board/edge.service.ts:58",{"_index":402,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["src/app/board/edge.service.ts:70",{"_index":419,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["src/app/board/edge.service.ts:81",{"_index":408,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["src/app/board/rotate.service.ts",{"_index":536,"title":{},"body":{"injectables/TetromisRotation.html":{},"coverage.html":{}}}],["src/app/board/rotate.service.ts:16",{"_index":543,"title":{},"body":{"injectables/TetromisRotation.html":{}}}],["src/app/board/tetromis.component.ts",{"_index":349,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{},"coverage.html":{}}}],["src/app/board/tetromis.component.ts:104",{"_index":534,"title":{},"body":{"classes/Tetromino.html":{}}}],["src/app/board/tetromis.component.ts:24",{"_index":529,"title":{},"body":{"classes/Tetromino.html":{}}}],["src/app/board/tetromis.component.ts:25",{"_index":530,"title":{},"body":{"classes/Tetromino.html":{}}}],["src/app/board/tetromis.component.ts:26",{"_index":528,"title":{},"body":{"classes/Tetromino.html":{}}}],["src/app/board/tetromis.component.ts:27",{"_index":527,"title":{},"body":{"classes/Tetromino.html":{}}}],["src/app/board/tetromis.component.ts:43",{"_index":535,"title":{},"body":{"classes/Tetromino.html":{}}}],["src/app/board/tetromis.component.ts:56",{"_index":531,"title":{},"body":{"classes/Tetromino.html":{}}}],["src/app/board/tetromis.component.ts:73",{"_index":532,"title":{},"body":{"classes/Tetromino.html":{}}}],["src/app/board/tetromis.component.ts:91",{"_index":533,"title":{},"body":{"classes/Tetromino.html":{}}}],["standort",{"_index":420,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["start",{"_index":204,"title":{},"body":{"components/BoardComponent.html":{}}}],["started",{"_index":583,"title":{"index.html":{}},"body":{}}],["starten",{"_index":144,"title":{},"body":{"components/BoardComponent.html":{}}}],["statements",{"_index":549,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":151,"title":{},"body":{"components/BoardComponent.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["steuerung",{"_index":82,"title":{},"body":{"components/BoardComponent.html":{}}}],["stored",{"_index":610,"title":{},"body":{"index.html":{}}}],["string",{"_index":351,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["style",{"_index":327,"title":{},"body":{"components/BoardComponent.html":{}}}],["styles",{"_index":6,"title":{},"body":{"components/BoardComponent.html":{}}}],["styleurls",{"_index":22,"title":{},"body":{"components/BoardComponent.html":{}}}],["table",{"_index":562,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":561,"title":{},"body":{"coverage.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/BoardComponent.html":{}}}],["templateurl",{"_index":24,"title":{},"body":{"components/BoardComponent.html":{}}}],["test",{"_index":619,"title":{},"body":{"index.html":{}}}],["tests",{"_index":618,"title":{},"body":{"index.html":{}}}],["tetris",{"_index":321,"title":{},"body":{"components/BoardComponent.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["tetromino",{"_index":178,"title":{"classes/Tetromino.html":{}},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/Tetromino.html":{},"coverage.html":{}}}],["tetromino(this.ctx",{"_index":255,"title":{},"body":{"components/BoardComponent.html":{}}}],["tetromis.component",{"_index":199,"title":{},"body":{"components/BoardComponent.html":{},"injectables/IsOnEdge.html":{},"injectables/TetromisRotation.html":{}}}],["tetromisrotation",{"_index":63,"title":{"injectables/TetromisRotation.html":{}},"body":{"components/BoardComponent.html":{},"injectables/TetromisRotation.html":{},"coverage.html":{}}}],["tetronomis",{"_index":354,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["this.abovefloor(y",{"_index":433,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["this.animate",{"_index":268,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.board",{"_index":220,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.board.foreach((row",{"_index":286,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.board.splice(y",{"_index":299,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.board.unshift(array(cols).fill(0",{"_index":300,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.board[y",{"_index":303,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.canvas.nativeelement.getcontext('2d",{"_index":233,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.canvasnext.nativeelement.getcontext('2d",{"_index":244,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.clearlines",{"_index":292,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.color",{"_index":364,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["this.ctx",{"_index":232,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.ctx.canvas.height",{"_index":238,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.ctx.canvas.width",{"_index":237,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.ctx.clearrect(0",{"_index":283,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.ctx.fillrect(1",{"_index":307,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.ctx.fillrect(this.x",{"_index":371,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["this.ctx.fillrect(x",{"_index":290,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.ctx.fillstyle",{"_index":288,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["this.ctx.filltext('game",{"_index":315,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.ctx.font",{"_index":311,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.ctx.scale(block_size",{"_index":242,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.ctxnext",{"_index":243,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.ctxnext.canvas.height",{"_index":250,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.ctxnext.canvas.width",{"_index":247,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.ctxnext.scale(block_size",{"_index":251,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.draw",{"_index":281,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.drawboard",{"_index":285,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.drop",{"_index":279,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.edge.getlinesclearedpoints(lines",{"_index":301,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.edge.valid(p",{"_index":219,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.freeze",{"_index":291,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.gameover",{"_index":212,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.gamestarted",{"_index":252,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.getemptyboard",{"_index":271,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.highscore",{"_index":231,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.initboard",{"_index":228,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.initnext",{"_index":229,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.insidewalls(x",{"_index":432,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["this.isempty(value",{"_index":431,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["this.level",{"_index":270,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.lines",{"_index":269,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.moves[event.keycode",{"_index":213,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.moves[event.keycode](this.piece",{"_index":217,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.moves[keys.down](this.piece",{"_index":224,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.next",{"_index":253,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.next.drawnext(this.ctxnext",{"_index":257,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.notoccupied(board",{"_index":434,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["this.paused",{"_index":274,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.piece",{"_index":256,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.piece.draw",{"_index":284,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.piece.move(p",{"_index":223,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.piece.shape.foreach((row",{"_index":302,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.piece.x",{"_index":305,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.piece.y",{"_index":293,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.piece.y][x",{"_index":304,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.points",{"_index":221,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.randomizetetrominotype(farben.length",{"_index":361,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["this.requestid",{"_index":265,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.resetgame",{"_index":230,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.rotate.rotate(p",{"_index":176,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.shape",{"_index":362,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["this.shape.foreach((row",{"_index":370,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["this.spawn",{"_index":355,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["this.time",{"_index":272,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.time.elapsed",{"_index":277,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.time.level",{"_index":278,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.time.start",{"_index":258,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.x",{"_index":366,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["this.y",{"_index":367,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["time",{"_index":42,"title":{},"body":{"components/BoardComponent.html":{}}}],["top",{"_index":324,"title":{},"body":{"components/BoardComponent.html":{}}}],["tree",{"_index":8,"title":{},"body":{"components/BoardComponent.html":{}}}],["triple",{"_index":469,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["true",{"_index":152,"title":{},"body":{"components/BoardComponent.html":{}}}],["tslib",{"_index":578,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":73,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeid",{"_index":360,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["um",{"_index":142,"title":{},"body":{"components/BoardComponent.html":{}}}],["und",{"_index":105,"title":{},"body":{"components/BoardComponent.html":{}}}],["unit",{"_index":617,"title":{},"body":{"index.html":{}}}],["unten",{"_index":122,"title":{},"body":{"components/BoardComponent.html":{}}}],["up",{"_index":441,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{}}}],["use",{"_index":606,"title":{},"body":{"index.html":{}}}],["valid",{"_index":400,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["valid(p",{"_index":423,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["validiert",{"_index":390,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["value",{"_index":92,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"classes/Tetromino.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":340,"title":{},"body":{"components/BoardComponent.html":{}}}],["variable",{"_index":553,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":636,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verloren",{"_index":126,"title":{},"body":{"components/BoardComponent.html":{}}}],["version",{"_index":589,"title":{},"body":{"index.html":{}}}],["via",{"_index":621,"title":{},"body":{"index.html":{}}}],["viewchild",{"_index":187,"title":{},"body":{"components/BoardComponent.html":{}}}],["viewchild('board",{"_index":150,"title":{},"body":{"components/BoardComponent.html":{}}}],["viewchild('next",{"_index":154,"title":{},"body":{"components/BoardComponent.html":{}}}],["void",{"_index":96,"title":{},"body":{"components/BoardComponent.html":{},"classes/Tetromino.html":{}}}],["von",{"_index":69,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["wand",{"_index":412,"title":{},"body":{"injectables/IsOnEdge.html":{}}}],["wenn",{"_index":121,"title":{},"body":{"components/BoardComponent.html":{}}}],["white",{"_index":330,"title":{},"body":{"components/BoardComponent.html":{}}}],["window:keydown",{"_index":58,"title":{},"body":{"components/BoardComponent.html":{}}}],["window:keydown(event",{"_index":78,"title":{},"body":{"components/BoardComponent.html":{}}}],["x",{"_index":167,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{}}}],["y",{"_index":172,"title":{},"body":{"components/BoardComponent.html":{},"interfaces/ITetromino.html":{},"injectables/IsOnEdge.html":{},"classes/Tetromino.html":{},"injectables/TetromisRotation.html":{}}}],["yellow",{"_index":458,"title":{},"body":{"classes/KEYS.html":{},"classes/LEVEL.html":{},"classes/PUNKTE.html":{},"miscellaneous/variables.html":{}}}],["zeichnen",{"_index":110,"title":{},"body":{"components/BoardComponent.html":{}}}],["zeichnet",{"_index":368,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["zone.js",{"_index":580,"title":{},"body":{"dependencies.html":{}}}],["zu",{"_index":143,"title":{},"body":{"components/BoardComponent.html":{}}}],["zufälliger",{"_index":381,"title":{},"body":{"interfaces/ITetromino.html":{},"classes/Tetromino.html":{}}}],["zurücksetzen",{"_index":146,"title":{},"body":{"components/BoardComponent.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/BoardComponent.html":{"url":"components/BoardComponent.html","title":"component - BoardComponent","body":"\n                   \n\n\n\n\n\n  Components\n  BoardComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/board/board.component.ts\n\n\n    \n        Description\n    \n    \n        Component für das Spielfeld\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n    \n        Example\n    \n    \n    \n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-board\n            \n\n            \n                styleUrls\n                ./board.component.css\n            \n\n\n\n            \n                templateUrl\n                ./board.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                board\n                            \n                            \n                                canvas\n                            \n                            \n                                canvasNext\n                            \n                            \n                                ctx\n                            \n                            \n                                ctxNext\n                            \n                            \n                                gameStarted\n                            \n                            \n                                highScore\n                            \n                            \n                                level\n                            \n                            \n                                lines\n                            \n                            \n                                moves\n                            \n                            \n                                next\n                            \n                            \n                                paused\n                            \n                            \n                                piece\n                            \n                            \n                                points\n                            \n                            \n                                requestId\n                            \n                            \n                                time\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                animate\n                            \n                            \n                                clearLines\n                            \n                            \n                                draw\n                            \n                            \n                                drawBoard\n                            \n                            \n                                drop\n                            \n                            \n                                freeze\n                            \n                            \n                                gameOver\n                            \n                            \n                                getEmptyBoard\n                            \n                            \n                                initBoard\n                            \n                            \n                                initNext\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                play\n                            \n                            \n                                resetGame\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                window:keydown\n                            \n                        \n                    \n                \n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(edge: IsOnEdge, rotate: TetromisRotation)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/board.component.ts:73\n                            \n                        \n\n                \n                    \n                            Erstellt eine instanz von BoardComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        edge\n                                                  \n                                                        \n                                                                        IsOnEdge\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rotate\n                                                  \n                                                        \n                                                                        TetromisRotation\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            window:keydown\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nwindow:keydown(event: KeyboardEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/board.component.ts:52\n                \n            \n\n\n            \n                \n                    Pfeiltasten Steuerung für die Blöcke.\n\n\n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            animate\n                        \n                        \n                    \n                \n            \n            \n                \nanimate(now: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/board.component.ts:168\n                \n            \n\n\n            \n                \n                    Animationsloop der dropbewegung\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    now\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clearLines\n                        \n                        \n                    \n                \n            \n            \n                \nclearLines()\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/board.component.ts:237\n                \n            \n\n\n            \n                \n                    Bei 10 Blöcken neben einander die Linie Löschen und den Score erhöhen\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \ndraw()\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/board.component.ts:186\n                \n            \n\n\n            \n                \n                    Zeichnen der Blöcke\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            drawBoard\n                        \n                        \n                    \n                \n            \n            \n                \ndrawBoard()\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/board.component.ts:197\n                \n            \n\n\n            \n                \n                    Zeichnen des Boardes\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            drop\n                        \n                        \n                    \n                \n            \n            \n                \ndrop()\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/board.component.ts:214\n                \n            \n\n\n            \n                \n                    Abwärts bewegung\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            freeze\n                        \n                        \n                    \n                \n            \n            \n                \nfreeze()\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/board.component.ts:262\n                \n            \n\n\n            \n                \n                    Block einfrieren wenn unten angekommen\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            gameOver\n                        \n                        \n                    \n                \n            \n            \n                \ngameOver()\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/board.component.ts:277\n                \n            \n\n\n            \n                \n                    Spiel Verloren.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEmptyBoard\n                        \n                        \n                    \n                \n            \n            \n                \ngetEmptyBoard()\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/board.component.ts:293\n                \n            \n\n\n            \n                \n                    Leeres Matrix board erstellen\n\n\n                    \n                    \n                    \n                        Returns :     [][]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            initBoard\n                        \n                        \n                    \n                \n            \n            \n                \ninitBoard()\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/board.component.ts:99\n                \n            \n\n\n            \n                \n                    Initialisiert das Board\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            initNext\n                        \n                        \n                    \n                \n            \n            \n                \ninitNext()\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/board.component.ts:115\n                \n            \n\n\n            \n                \n                    Initialisiert den nächsten Block\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/board.component.ts:88\n                \n            \n\n\n            \n                \n                    Ruft methoden bei Initialisierung auf.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            play\n                        \n                        \n                    \n                \n            \n            \n                \nplay()\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/board.component.ts:131\n                \n            \n\n\n            \n                \n                    Button um das spiel zu starten\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            resetGame\n                        \n                        \n                    \n                \n            \n            \n                \nresetGame()\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/board.component.ts:152\n                \n            \n\n\n            \n                \n                    Spiel zurücksetzen\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            board\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[][]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/board.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            canvas\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('board', {static: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/board.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            canvasNext\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('next', {static: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/board.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ctx\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     CanvasRenderingContext2D\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/board.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ctxNext\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     CanvasRenderingContext2D\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/board.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gameStarted\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/board.component.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            highScore\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/board.component.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            level\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/board.component.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lines\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/board.component.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            moves\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    [KEYS.LEFT]: (p: ITetromino): ITetromino => ({ ...p, x: p.x - 1 }),\n    [KEYS.RIGHT]: (p: ITetromino): ITetromino => ({ ...p, x: p.x + 1 }),\n    [KEYS.DOWN]: (p: ITetromino): ITetromino => ({ ...p, y: p.y + 1 }),\n    [KEYS.SPACE]: (p: ITetromino): ITetromino => ({ ...p, y: p.y + 1 }),\n    [KEYS.UP]: (p: ITetromino): ITetromino => this.rotate.rotate(p)\n  }\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/board.component.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            next\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Tetromino\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/board.component.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            paused\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/board.component.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            piece\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Tetromino\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/board.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            points\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/board.component.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            requestId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/board.component.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            time\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/board.component.ts:32\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, ViewChild, ElementRef, OnInit, HostListener} from '@angular/core';\nimport { COLS, BLOCK_SIZE, ROWS, KEYS, FARBEN, FORMEN, PUNKTE, LEVEL, LINES_PER_LEVEL } from './constants';\nimport { Tetromino, ITetromino } from './tetromis.component';\nimport {IsOnEdge} from './edge.service';\nimport {TetromisRotation} from './rotate.service';\n\n/**\n *\n * Component für das Spielfeld\n * @export\n * @class BoardComponent\n * @implements {OnInit}\n */\n@Component({\n  selector: 'app-board',\n  templateUrl: './board.component.html',\n  styleUrls: ['./board.component.css']\n})\nexport class BoardComponent implements OnInit {\n  @ViewChild('board', { static: true })\n  canvas: ElementRef;\n  @ViewChild('next', { static: true })\n  canvasNext: ElementRef;\n  ctx: CanvasRenderingContext2D;\n  ctxNext: CanvasRenderingContext2D;\n  board: number[][];\n  piece: Tetromino;\n  next: Tetromino;\n  requestId: number;\n  paused: boolean;\n  gameStarted: boolean;\n  time: { start: number; elapsed: number; level: number };\n  points: number;\n  highScore: number;\n  lines: number;\n  level: number;\n  moves = {\n    [KEYS.LEFT]: (p: ITetromino): ITetromino => ({ ...p, x: p.x - 1 }),\n    [KEYS.RIGHT]: (p: ITetromino): ITetromino => ({ ...p, x: p.x + 1 }),\n    [KEYS.DOWN]: (p: ITetromino): ITetromino => ({ ...p, y: p.y + 1 }),\n    [KEYS.SPACE]: (p: ITetromino): ITetromino => ({ ...p, y: p.y + 1 }),\n    [KEYS.UP]: (p: ITetromino): ITetromino => this.rotate.rotate(p)\n  };\n\n  /**\n   *\n   * Pfeiltasten Steuerung für die Blöcke.\n   * @param {KeyboardEvent} event\n   * @memberof BoardComponent\n   */\n  @HostListener('window:keydown', ['$event'])\n  keyEvent(event: KeyboardEvent) {\n    if (event.keyCode === KEYS.ESC) {\n      this.gameOver();\n    } else if (this.moves[event.keyCode]) {\n      event.preventDefault();\n      // Neuer Event abhollen\n      let p = this.moves[event.keyCode](this.piece);\n      if (event.keyCode === KEYS.SPACE) {\n        // Hard drop\n        while (this.edge.valid(p, this.board)) {\n          this.points += PUNKTE.HARD_DROP;\n          this.piece.move(p);\n          p = this.moves[KEYS.DOWN](this.piece);\n        }\n      } else if (this.edge.valid(p, this.board)) {\n        this.piece.move(p);\n        if (event.keyCode === KEYS.DOWN) {\n          this.points += PUNKTE.SOFT_DROP;\n        }\n      }\n    }\n  }\n\n  /**\n   *Erstellt eine instanz von BoardComponent.\n   * @param {IsOnEdge} edge\n   * @param {TetromisRotation} rotate\n   * @memberof BoardComponent\n   */\n  constructor(private edge: IsOnEdge, private rotate: TetromisRotation) {}\n\n  /**\n   *\n   * Ruft methoden bei Initialisierung auf.\n   * @memberof BoardComponent\n   */\n  ngOnInit() {\n    this.initBoard();\n    this.initNext();\n    this.resetGame();\n    this.highScore = 0;\n  }\n  /**\n   * Initialisiert das Board\n   *\n   * @memberof BoardComponent\n   */\n  initBoard() {\n    this.ctx = this.canvas.nativeElement.getContext('2d');\n\n    // Rechnet die Block grössen aus\n    this.ctx.canvas.width = COLS * BLOCK_SIZE;\n    this.ctx.canvas.height = ROWS * BLOCK_SIZE;\n\n    //Skaliert die alle Objekte\n    this.ctx.scale(BLOCK_SIZE, BLOCK_SIZE);\n  }\n\n  /**\n   * Initialisiert den nächsten Block\n   *\n   * @memberof BoardComponent\n   */\n  initNext() {\n    this.ctxNext = this.canvasNext.nativeElement.getContext('2d');\n\n    // Grösse von nächsten Blöcken ausrechnen\n    this.ctxNext.canvas.width = 4 * BLOCK_SIZE + 2;\n    this.ctxNext.canvas.height = 4 * BLOCK_SIZE;\n\n    this.ctxNext.scale(BLOCK_SIZE, BLOCK_SIZE);\n  }\n  \n  /**\n   *Button um das spiel zu starten\n   *\n   * @memberof BoardComponent\n   */\n\n  play() {\n    this.gameStarted = true;\n    this.resetGame();\n    this.next = new Tetromino(this.ctx);\n    this.piece = new Tetromino(this.ctx);\n    this.next.drawNext(this.ctxNext);\n    this.time.start = performance.now();\n\n    // Bei gleicher Request ID Animation abbrechen\n    if (this.requestId) {\n      cancelAnimationFrame(this.requestId);\n    }\n    //Animiert die Blöcke\n    this.animate();\n  }\n\n  /**\n   *Spiel zurücksetzen\n   *\n   * @memberof BoardComponent\n   */\n  resetGame() {\n    this.points = 0;\n    this.lines = 0;\n    this.level = 0;\n    this.board = this.getEmptyBoard();\n    this.time = { start: 0, elapsed: 0, level: LEVEL[this.level] };\n    this.paused = false;\n  }\n  \n  /**\n   *\n   *Animationsloop der dropbewegung\n   * @param {number} [now=0]\n   * @returns\n   * @memberof BoardComponent\n   */\n  animate(now = 0) {\n    this.time.elapsed = now - this.time.start;\n    if (this.time.elapsed > this.time.level) {\n      this.time.start = now;\n      if (!this.drop()) {\n        this.gameOver();\n        return;\n      }\n    }\n    this.draw();\n    this.requestId = requestAnimationFrame(this.animate.bind(this));\n  }\n\n  /**\n   * Zeichnen der Blöcke\n   *\n   * @memberof BoardComponent\n   */\n  draw() {\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    this.piece.draw();\n    this.drawBoard();\n  }\n\n  /**\n   *Zeichnen des Boardes\n   *\n   * @memberof BoardComponent\n   */\n  drawBoard() {\n    this.board.forEach((row, y) => {\n      row.forEach((value, x) => {\n        if (value > 0) {\n          this.ctx.fillStyle = FARBEN[value];\n          this.ctx.fillRect(x, y, 1, 1);\n        }\n      });\n    });\n  }\n\n  /**\n   *\n   * Abwärts bewegung\n   * @returns {boolean}\n   * @memberof BoardComponent\n   */\n  drop(): boolean {\n    let p = this.moves[KEYS.DOWN](this.piece);\n    if (this.edge.valid(p, this.board)) {\n      this.piece.move(p);\n    } else {\n      this.freeze();\n      this.clearLines();\n      if (this.piece.y === 0) {\n        // Spiel beenden falls \"Dach\" erreicht\n        return false;\n      }\n      this.piece = this.next;\n      this.next = new Tetromino(this.ctx);\n      this.next.drawNext(this.ctxNext);\n    }\n    return true;\n  }\n  \n  /**\n   *\n   *Bei 10 Blöcken neben einander die Linie Löschen und den Score erhöhen\n   * @memberof BoardComponent\n   */\n  clearLines() {\n    let lines = 0;\n    this.board.forEach((row, y) => {\n      if (row.every(value => value !== 0)) {\n        lines++;\n        this.board.splice(y, 1);\n        this.board.unshift(Array(COLS).fill(0));\n      }\n    });\n    if (lines > 0) {\n      this.points += this.edge.getLinesClearedPoints(lines, this.level);\n      this.lines += lines;\n      if (this.lines >= LINES_PER_LEVEL) {\n        this.level++;\n        this.lines -= LINES_PER_LEVEL;\n        this.time.level = LEVEL[this.level];\n      }\n    }\n  }\n\n  /**\n   *\n   * Block einfrieren wenn unten angekommen\n   * @memberof BoardComponent\n   */\n  freeze() {\n    this.piece.shape.forEach((row, y) => {\n      row.forEach((value, x) => {\n        if (value > 0) {\n          this.board[y + this.piece.y][x + this.piece.x] = value;\n        }\n      });\n    });\n  }\n\n  /**\n   *\n   * Spiel Verloren.\n   * @memberof BoardComponent\n   */\n  gameOver() {\n    this.gameStarted = false;\n    cancelAnimationFrame(this.requestId);\n    this.ctx.fillStyle = 'black';\n    this.ctx.fillRect(1, 3, 8, 1.2);\n    this.ctx.font = '1px Arial';\n    this.ctx.fillStyle = 'red';\n    this.ctx.fillText('GAME OVER', 1.8, 4);\n  }\n  \n  /**\n   *\n   * Leeres Matrix board erstellen\n   * @returns {number[][]}\n   * @memberof BoardComponent\n   */\n  getEmptyBoard(): number[][] {\n    return Array.from({ length: ROWS }, () => Array(COLS).fill(0));\n  }\n}\n\n    \n\n    \n        \n\n\n    \n    \n      \n        TETRIS\n        Score: {{ points }}\n        Lines: {{ lines }}\n        Level: {{ level }}\n        \n      \n      Play\n      beenden\n    \n  \n  \n  \n    \n\n    \n                \n                    ./board.component.css\n                \n                .grid {\n\n    margin-top: 5%;\n\n}\n\n.app-board {\n    border-style: solid;\n    border-color: white;\n    margin-left: 35%;\n}\n\n.right-column {\n\n    color: white;\n\n}\n\n.right-column {\n\n    float: right;\n    margin-right: 35%;\n\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                      TETRIS        Score: {{ points }}        Lines: {{ lines }}        Level: {{ level }}                    Play      beenden          '\n    var COMPONENTS = [{'name': 'BoardComponent', 'selector': 'app-board'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BoardComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITetromino.html":{"url":"interfaces/ITetromino.html","title":"interface - ITetromino","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITetromino\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/board/tetromis.component.ts\n        \n\n            \n                Description\n            \n            \n                Interface für Tetromino löschen\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        color\n                                \n                                \n                                        shape\n                                \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shape\n                                    \n                                \n                                \n                                    \n                                        shape:     number[][]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[][]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { FARBEN, FORMEN } from './constants';\n\n/**\n *\n * Interface für Tetromino löschen\n * @export\n * @interface ITetromino\n */\nexport interface ITetromino {\n  x: number;\n  y: number;\n  color: string;\n  shape: number[][];\n}\n\n/**\n *\n * Klasse Tetromino erstellen\n * @export\n * @class Tetromino\n * @implements {ITetromino}\n */\nexport class Tetromino implements ITetromino {\n  x: number;\n  y: number;\n  color: string;\n  shape: number[][];\n\n  /**\n   * Erstellt eine Instant von Tetronomis.\n   * @param {CanvasRenderingContext2D} ctx\n   * @memberof Tetromino\n   */\n  constructor(private ctx: CanvasRenderingContext2D) {\n    this.spawn();\n  }\n\n  /**\n   *\n   * Spawnt einen Block.\n   * @memberof Tetromino\n   */\n  spawn() {\n    const typeId = this.randomizeTetrominoType(FARBEN.length - 1);\n    this.shape = FORMEN[typeId];\n    this.color = FARBEN[typeId];\n    this.x = typeId === 4 ? 4 : 3;\n    this.y = 0;\n  }\n\n  /**\n   *\n   * Zeichnet einen Block in der Farbe\n   * @memberof Tetromino\n   */\n  draw() {\n    this.ctx.fillStyle = this.color;\n    this.shape.forEach((row, y) => {\n      row.forEach((value, x) => {\n        if (value > 0) {\n          this.ctx.fillRect(this.x + x, this.y + y, 1, 1);\n        }\n      });\n    });\n  }\n\n  /**\n   *\n   * Zeichnet den nächsten Block.\n   * @param {CanvasRenderingContext2D} ctxNext\n   * @memberof Tetromino\n   */\n  drawNext(ctxNext: CanvasRenderingContext2D) {\n    ctxNext.clearRect(0, 0, ctxNext.canvas.width, ctxNext.canvas.height);\n    ctxNext.fillStyle = this.color;\n    this.shape.forEach((row, y) => {\n      row.forEach((value, x) => {\n        if (value > 0) {\n          ctxNext.fillRect(x, y, 1, 1);\n        }\n      });\n    });\n  }\n\n  /**\n   *\n   * Bewegt einen Block\n   * @param {ITetromino} p\n   * @memberof Tetromino\n   */\n  move(p: ITetromino) {\n    this.x = p.x;\n    this.y = p.y;\n    this.shape = p.shape;\n  }\n\n  /**\n   *\n   * Zufälliger Blocktyp generieren\n   * @param {number} noOfTypes\n   * @returns {number}\n   * @memberof Tetromino\n   */\n  randomizeTetrominoType(noOfTypes: number): number {\n    return Math.floor(Math.random() * noOfTypes + 1);\n  }\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IsOnEdge.html":{"url":"injectables/IsOnEdge.html","title":"injectable - IsOnEdge","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  IsOnEdge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/board/edge.service.ts\n        \n\n            \n                Description\n            \n            \n                Klasse validiert das sich der Block an einem legalen ort bewegt.\n\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                aboveFloor\n                            \n                            \n                                getLinesClearedPoints\n                            \n                            \n                                insideWalls\n                            \n                            \n                                isEmpty\n                            \n                            \n                                notOccupied\n                            \n                            \n                                valid\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            aboveFloor\n                        \n                        \n                    \n                \n            \n            \n                \naboveFloor(y: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/edge.service.ts:58\n                \n            \n\n\n            \n                \n                    Methode über dem Boden\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getLinesClearedPoints\n                        \n                        \n                    \n                \n            \n            \n                \ngetLinesClearedPoints(lines: number, level: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/edge.service.ts:81\n                \n            \n\n\n            \n                \n                    Score erhöhen\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lines\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    level\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            insideWalls\n                        \n                        \n                    \n                \n            \n            \n                \ninsideWalls(x: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/edge.service.ts:48\n                \n            \n\n\n            \n                \n                    Methode in einer Wand\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isEmpty\n                        \n                        \n                    \n                \n            \n            \n                \nisEmpty(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/edge.service.ts:37\n                \n            \n\n\n            \n                \n                    Methode leere Felder finden\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            notOccupied\n                        \n                        \n                    \n                \n            \n            \n                \nnotOccupied(board: number[][], x: number, y: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/edge.service.ts:70\n                \n            \n\n\n            \n                \n                    Standort nicht besetzt\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    board\n                                    \n                                            number[][]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            valid\n                        \n                        \n                    \n                \n            \n            \n                \nvalid(p: ITetromino, board: number[][])\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/edge.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                ITetromino\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    board\n                                    \n                                            number[][]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { ITetromino } from './tetromis.component';\nimport { COLS, ROWS, PUNKTE } from './constants';\n\n/**\n *\n *Klasse validiert das sich der Block an einem legalen ort bewegt.\n * @export\n * @class IsOnEdge\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class IsOnEdge {\n  valid(p: ITetromino, board: number[][]): boolean {\n    return p.shape.every((row, dy) => {\n      return row.every((value, dx) => {\n        let x = p.x + dx;\n        let y = p.y + dy;\n        return (\n          this.isEmpty(value) ||\n          (this.insideWalls(x) &&\n            this.aboveFloor(y) &&\n            this.notOccupied(board, x, y))\n        );\n      });\n    });\n  }\n\n  /**\n   *\n   * Methode leere Felder finden\n   * @param {number} value\n   * @returns {boolean}\n   * @memberof IsOnEdge\n   */\n  isEmpty(value: number): boolean {\n    return value === 0;\n  }\n\n  /**\n   *\n   *Methode in einer Wand\n   * @param {number} x\n   * @returns {boolean}\n   * @memberof IsOnEdge\n   */\n  insideWalls(x: number): boolean {\n    return x >= 0 && x \n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KEYS.html":{"url":"classes/KEYS.html","title":"class - KEYS","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KEYS\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/board/constants.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                DOWN\n                            \n                            \n                                    Static\n                                    Readonly\n                                ESC\n                            \n                            \n                                    Static\n                                    Readonly\n                                LEFT\n                            \n                            \n                                    Static\n                                    Readonly\n                                RIGHT\n                            \n                            \n                                    Static\n                                    Readonly\n                                SPACE\n                            \n                            \n                                    Static\n                                    Readonly\n                                UP\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DOWN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 40\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            ESC\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 27\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            LEFT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 37\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            RIGHT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 39\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            SPACE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 32\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            UP\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 38\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:30\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export const FARBEN = [\n    'none',\n    'cyan',\n    'blue',\n    'orange',\n    'yellow',\n    'green',\n    'purple',\n    'red'\n  ];\n  export const FORMEN = [\n    [],\n    [[0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]],\n    [[2, 0, 0], [2, 2, 2], [0, 0, 0]],\n    [[0, 0, 3], [3, 3, 3], [0, 0, 0]],\n    [[4, 4], [4, 4]],\n    [[0, 5, 5], [5, 5, 0], [0, 0, 0]],\n    [[0, 6, 0], [6, 6, 6], [0, 0, 0]],\n    [[7, 7, 0], [0, 7, 7], [0, 0, 0]]\n  ];\nexport const COLS = 10;\nexport const ROWS = 20;\nexport const BLOCK_SIZE = 30;\nexport const LINES_PER_LEVEL = 10;\n\nexport class KEYS {\n    static readonly ESC = 27;\n    static readonly SPACE = 32;\n    static readonly LEFT = 37;\n    static readonly UP = 38;\n    static readonly RIGHT = 39;\n    static readonly DOWN = 40;\n  }\n\n  export class PUNKTE {\n    static readonly SINGLE = 100;\n    static readonly DOUBLE = 300;\n    static readonly TRIPLE = 500;\n    static readonly TETRIS = 800;\n    static readonly SOFT_DROP = 1;\n    static readonly HARD_DROP = 2;\n  }\n\n  export class LEVEL {\n    static readonly 0 = 800;\n    static readonly 1 = 720;\n    static readonly 2 = 630;\n    static readonly 3 = 550;\n    static readonly 4 = 470;\n    static readonly 5 = 380;\n    static readonly 6 = 300;\n    static readonly 7 = 220;\n    static readonly 8 = 130;\n    static readonly 9 = 100;\n    static readonly 10 = 80;\n    static readonly 11 = 80;\n    static readonly 12 = 80;\n    static readonly 13 = 70;\n    static readonly 14 = 70;\n    static readonly 15 = 70;\n    static readonly 16 = 50;\n    static readonly 17 = 50;\n    static readonly 18 = 50;\n    static readonly 19 = 30;\n    static readonly 20 = 30;\n    // 29+ is 20ms\n  }\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LEVEL.html":{"url":"classes/LEVEL.html","title":"class - LEVEL","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LEVEL\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/board/constants.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                0\n                            \n                            \n                                    Static\n                                    Readonly\n                                1\n                            \n                            \n                                    Static\n                                    Readonly\n                                10\n                            \n                            \n                                    Static\n                                    Readonly\n                                11\n                            \n                            \n                                    Static\n                                    Readonly\n                                12\n                            \n                            \n                                    Static\n                                    Readonly\n                                13\n                            \n                            \n                                    Static\n                                    Readonly\n                                14\n                            \n                            \n                                    Static\n                                    Readonly\n                                15\n                            \n                            \n                                    Static\n                                    Readonly\n                                16\n                            \n                            \n                                    Static\n                                    Readonly\n                                17\n                            \n                            \n                                    Static\n                                    Readonly\n                                18\n                            \n                            \n                                    Static\n                                    Readonly\n                                19\n                            \n                            \n                                    Static\n                                    Readonly\n                                2\n                            \n                            \n                                    Static\n                                    Readonly\n                                20\n                            \n                            \n                                    Static\n                                    Readonly\n                                3\n                            \n                            \n                                    Static\n                                    Readonly\n                                4\n                            \n                            \n                                    Static\n                                    Readonly\n                                5\n                            \n                            \n                                    Static\n                                    Readonly\n                                6\n                            \n                            \n                                    Static\n                                    Readonly\n                                7\n                            \n                            \n                                    Static\n                                    Readonly\n                                8\n                            \n                            \n                                    Static\n                                    Readonly\n                                9\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            0\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 800\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            1\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 720\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:46\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            10\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 80\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:55\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            11\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 80\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:56\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            12\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 80\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:57\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            13\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 70\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:58\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            14\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 70\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            15\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 70\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:60\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            16\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 50\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:61\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            17\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 50\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:62\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            18\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 50\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:63\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            19\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 30\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:64\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 630\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            20\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 30\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:65\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            3\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 550\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            4\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 470\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:49\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            5\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 380\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            6\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 300\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:51\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            7\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 220\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:52\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            8\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 130\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            9\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 100\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:54\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export const FARBEN = [\n    'none',\n    'cyan',\n    'blue',\n    'orange',\n    'yellow',\n    'green',\n    'purple',\n    'red'\n  ];\n  export const FORMEN = [\n    [],\n    [[0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]],\n    [[2, 0, 0], [2, 2, 2], [0, 0, 0]],\n    [[0, 0, 3], [3, 3, 3], [0, 0, 0]],\n    [[4, 4], [4, 4]],\n    [[0, 5, 5], [5, 5, 0], [0, 0, 0]],\n    [[0, 6, 0], [6, 6, 6], [0, 0, 0]],\n    [[7, 7, 0], [0, 7, 7], [0, 0, 0]]\n  ];\nexport const COLS = 10;\nexport const ROWS = 20;\nexport const BLOCK_SIZE = 30;\nexport const LINES_PER_LEVEL = 10;\n\nexport class KEYS {\n    static readonly ESC = 27;\n    static readonly SPACE = 32;\n    static readonly LEFT = 37;\n    static readonly UP = 38;\n    static readonly RIGHT = 39;\n    static readonly DOWN = 40;\n  }\n\n  export class PUNKTE {\n    static readonly SINGLE = 100;\n    static readonly DOUBLE = 300;\n    static readonly TRIPLE = 500;\n    static readonly TETRIS = 800;\n    static readonly SOFT_DROP = 1;\n    static readonly HARD_DROP = 2;\n  }\n\n  export class LEVEL {\n    static readonly 0 = 800;\n    static readonly 1 = 720;\n    static readonly 2 = 630;\n    static readonly 3 = 550;\n    static readonly 4 = 470;\n    static readonly 5 = 380;\n    static readonly 6 = 300;\n    static readonly 7 = 220;\n    static readonly 8 = 130;\n    static readonly 9 = 100;\n    static readonly 10 = 80;\n    static readonly 11 = 80;\n    static readonly 12 = 80;\n    static readonly 13 = 70;\n    static readonly 14 = 70;\n    static readonly 15 = 70;\n    static readonly 16 = 50;\n    static readonly 17 = 50;\n    static readonly 18 = 50;\n    static readonly 19 = 30;\n    static readonly 20 = 30;\n    // 29+ is 20ms\n  }\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PUNKTE.html":{"url":"classes/PUNKTE.html","title":"class - PUNKTE","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PUNKTE\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/board/constants.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                DOUBLE\n                            \n                            \n                                    Static\n                                    Readonly\n                                HARD_DROP\n                            \n                            \n                                    Static\n                                    Readonly\n                                SINGLE\n                            \n                            \n                                    Static\n                                    Readonly\n                                SOFT_DROP\n                            \n                            \n                                    Static\n                                    Readonly\n                                TETRIS\n                            \n                            \n                                    Static\n                                    Readonly\n                                TRIPLE\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DOUBLE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 300\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            HARD_DROP\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 2\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            SINGLE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 100\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            SOFT_DROP\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            TETRIS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 800\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            TRIPLE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 500\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/constants.ts:38\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export const FARBEN = [\n    'none',\n    'cyan',\n    'blue',\n    'orange',\n    'yellow',\n    'green',\n    'purple',\n    'red'\n  ];\n  export const FORMEN = [\n    [],\n    [[0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]],\n    [[2, 0, 0], [2, 2, 2], [0, 0, 0]],\n    [[0, 0, 3], [3, 3, 3], [0, 0, 0]],\n    [[4, 4], [4, 4]],\n    [[0, 5, 5], [5, 5, 0], [0, 0, 0]],\n    [[0, 6, 0], [6, 6, 6], [0, 0, 0]],\n    [[7, 7, 0], [0, 7, 7], [0, 0, 0]]\n  ];\nexport const COLS = 10;\nexport const ROWS = 20;\nexport const BLOCK_SIZE = 30;\nexport const LINES_PER_LEVEL = 10;\n\nexport class KEYS {\n    static readonly ESC = 27;\n    static readonly SPACE = 32;\n    static readonly LEFT = 37;\n    static readonly UP = 38;\n    static readonly RIGHT = 39;\n    static readonly DOWN = 40;\n  }\n\n  export class PUNKTE {\n    static readonly SINGLE = 100;\n    static readonly DOUBLE = 300;\n    static readonly TRIPLE = 500;\n    static readonly TETRIS = 800;\n    static readonly SOFT_DROP = 1;\n    static readonly HARD_DROP = 2;\n  }\n\n  export class LEVEL {\n    static readonly 0 = 800;\n    static readonly 1 = 720;\n    static readonly 2 = 630;\n    static readonly 3 = 550;\n    static readonly 4 = 470;\n    static readonly 5 = 380;\n    static readonly 6 = 300;\n    static readonly 7 = 220;\n    static readonly 8 = 130;\n    static readonly 9 = 100;\n    static readonly 10 = 80;\n    static readonly 11 = 80;\n    static readonly 12 = 80;\n    static readonly 13 = 70;\n    static readonly 14 = 70;\n    static readonly 15 = 70;\n    static readonly 16 = 50;\n    static readonly 17 = 50;\n    static readonly 18 = 50;\n    static readonly 19 = 30;\n    static readonly 20 = 30;\n    // 29+ is 20ms\n  }\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tetromino.html":{"url":"classes/Tetromino.html","title":"class - Tetromino","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tetromino\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/board/tetromis.component.ts\n        \n\n            \n                Description\n            \n            \n                Klasse Tetromino erstellen\n\n            \n\n\n            \n                Implements\n            \n            \n                            ITetromino\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                color\n                            \n                            \n                                shape\n                            \n                            \n                                x\n                            \n                            \n                                y\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                draw\n                            \n                            \n                                drawNext\n                            \n                            \n                                move\n                            \n                            \n                                randomizeTetrominoType\n                            \n                            \n                                spawn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ctx: CanvasRenderingContext2D)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/tetromis.component.ts:27\n                            \n                        \n\n                \n                    \n                            Erstellt eine Instant von Tetronomis.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ctx\n                                                  \n                                                        \n                                                                    CanvasRenderingContext2D\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            color\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/tetromis.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            shape\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[][]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/tetromis.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            x\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/tetromis.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            y\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/board/tetromis.component.ts:25\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \ndraw()\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/tetromis.component.ts:56\n                \n            \n\n\n            \n                \n                    Zeichnet einen Block in der Farbe\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            drawNext\n                        \n                        \n                    \n                \n            \n            \n                \ndrawNext(ctxNext: CanvasRenderingContext2D)\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/tetromis.component.ts:73\n                \n            \n\n\n            \n                \n                    Zeichnet den nächsten Block.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ctxNext\n                                    \n                                            CanvasRenderingContext2D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            move\n                        \n                        \n                    \n                \n            \n            \n                \nmove(p: ITetromino)\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/tetromis.component.ts:91\n                \n            \n\n\n            \n                \n                    Bewegt einen Block\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                ITetromino\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            randomizeTetrominoType\n                        \n                        \n                    \n                \n            \n            \n                \nrandomizeTetrominoType(noOfTypes: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/tetromis.component.ts:104\n                \n            \n\n\n            \n                \n                    Zufälliger Blocktyp generieren\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    noOfTypes\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            spawn\n                        \n                        \n                    \n                \n            \n            \n                \nspawn()\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/tetromis.component.ts:43\n                \n            \n\n\n            \n                \n                    Spawnt einen Block.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FARBEN, FORMEN } from './constants';\n\n/**\n *\n * Interface für Tetromino löschen\n * @export\n * @interface ITetromino\n */\nexport interface ITetromino {\n  x: number;\n  y: number;\n  color: string;\n  shape: number[][];\n}\n\n/**\n *\n * Klasse Tetromino erstellen\n * @export\n * @class Tetromino\n * @implements {ITetromino}\n */\nexport class Tetromino implements ITetromino {\n  x: number;\n  y: number;\n  color: string;\n  shape: number[][];\n\n  /**\n   * Erstellt eine Instant von Tetronomis.\n   * @param {CanvasRenderingContext2D} ctx\n   * @memberof Tetromino\n   */\n  constructor(private ctx: CanvasRenderingContext2D) {\n    this.spawn();\n  }\n\n  /**\n   *\n   * Spawnt einen Block.\n   * @memberof Tetromino\n   */\n  spawn() {\n    const typeId = this.randomizeTetrominoType(FARBEN.length - 1);\n    this.shape = FORMEN[typeId];\n    this.color = FARBEN[typeId];\n    this.x = typeId === 4 ? 4 : 3;\n    this.y = 0;\n  }\n\n  /**\n   *\n   * Zeichnet einen Block in der Farbe\n   * @memberof Tetromino\n   */\n  draw() {\n    this.ctx.fillStyle = this.color;\n    this.shape.forEach((row, y) => {\n      row.forEach((value, x) => {\n        if (value > 0) {\n          this.ctx.fillRect(this.x + x, this.y + y, 1, 1);\n        }\n      });\n    });\n  }\n\n  /**\n   *\n   * Zeichnet den nächsten Block.\n   * @param {CanvasRenderingContext2D} ctxNext\n   * @memberof Tetromino\n   */\n  drawNext(ctxNext: CanvasRenderingContext2D) {\n    ctxNext.clearRect(0, 0, ctxNext.canvas.width, ctxNext.canvas.height);\n    ctxNext.fillStyle = this.color;\n    this.shape.forEach((row, y) => {\n      row.forEach((value, x) => {\n        if (value > 0) {\n          ctxNext.fillRect(x, y, 1, 1);\n        }\n      });\n    });\n  }\n\n  /**\n   *\n   * Bewegt einen Block\n   * @param {ITetromino} p\n   * @memberof Tetromino\n   */\n  move(p: ITetromino) {\n    this.x = p.x;\n    this.y = p.y;\n    this.shape = p.shape;\n  }\n\n  /**\n   *\n   * Zufälliger Blocktyp generieren\n   * @param {number} noOfTypes\n   * @returns {number}\n   * @memberof Tetromino\n   */\n  randomizeTetrominoType(noOfTypes: number): number {\n    return Math.floor(Math.random() * noOfTypes + 1);\n  }\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TetromisRotation.html":{"url":"injectables/TetromisRotation.html","title":"injectable - TetromisRotation","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TetromisRotation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/board/rotate.service.ts\n        \n\n            \n                Description\n            \n            \n                klasse ermöglicht als Service, dass Rotieren der Blöcke.\n\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                rotate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            rotate\n                        \n                        \n                    \n                \n            \n            \n                \nrotate(piece: ITetromino)\n                \n            \n\n\n            \n                \n                    Defined in src/app/board/rotate.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    piece\n                                    \n                                                ITetromino\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ITetromino\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { ITetromino } from './tetromis.component';\nimport { COLS, ROWS, PUNKTE } from './constants';\n\n/**\n *\n * klasse ermöglicht als Service, dass Rotieren der Blöcke.\n * @export\n * @class TetromisRotation\n */\n@Injectable({\n    providedIn: 'root'\n  })\n  export class TetromisRotation {\n\n    rotate(piece: ITetromino): ITetromino {\n        let p: ITetromino = JSON.parse(JSON.stringify(piece));\n        for (let y = 0; y  row.reverse());\n        return p;\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/board/board.component.ts\n            \n            component\n            BoardComponent\n            \n                50 %\n                (16/32)\n            \n        \n        \n            \n                \n                src/app/board/constants.ts\n            \n            class\n            KEYS\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/board/constants.ts\n            \n            class\n            LEVEL\n            \n                0 %\n                (0/22)\n            \n        \n        \n            \n                \n                src/app/board/constants.ts\n            \n            class\n            PUNKTE\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/board/constants.ts\n            \n            variable\n            BLOCK_SIZE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/board/constants.ts\n            \n            variable\n            COLS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/board/constants.ts\n            \n            variable\n            FARBEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/board/constants.ts\n            \n            variable\n            FORMEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/board/constants.ts\n            \n            variable\n            LINES_PER_LEVEL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/board/constants.ts\n            \n            variable\n            ROWS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/board/edge.service.ts\n            \n            injectable\n            IsOnEdge\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/app/board/rotate.service.ts\n            \n            injectable\n            TetromisRotation\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/board/tetromis.component.ts\n            \n            class\n            Tetromino\n            \n                63 %\n                (7/11)\n            \n        \n        \n            \n                \n                src/app/board/tetromis.component.ts\n            \n            interface\n            ITetromino\n            \n                20 %\n                (1/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~8.2.14\n        \n            @angular/common : ~8.2.14\n        \n            @angular/compiler : ~8.2.14\n        \n            @angular/core : ~8.2.14\n        \n            @angular/forms : ~8.2.14\n        \n            @angular/platform-browser : ~8.2.14\n        \n            @angular/platform-browser-dynamic : ~8.2.14\n        \n            @angular/router : ~8.2.14\n        \n            bootstrap : ^4.4.1\n        \n            rxjs : ~6.4.0\n        \n            tslib : ^1.10.0\n        \n            zone.js : ~0.9.1\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAngularTetris\nThis project was generated with Angular CLI version 8.3.20.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BLOCK_SIZE   (src/.../constants.ts)\n                        \n                        \n                            COLS   (src/.../constants.ts)\n                        \n                        \n                            FARBEN   (src/.../constants.ts)\n                        \n                        \n                            FORMEN   (src/.../constants.ts)\n                        \n                        \n                            LINES_PER_LEVEL   (src/.../constants.ts)\n                        \n                        \n                            ROWS   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/board/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            BLOCK_SIZE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 30\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            COLS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            FARBEN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    'none',\n    'cyan',\n    'blue',\n    'orange',\n    'yellow',\n    'green',\n    'purple',\n    'red'\n  ]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            FORMEN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    [],\n    [[0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]],\n    [[2, 0, 0], [2, 2, 2], [0, 0, 0]],\n    [[0, 0, 3], [3, 3, 3], [0, 0, 0]],\n    [[4, 4], [4, 4]],\n    [[0, 5, 5], [5, 5, 0], [0, 0, 0]],\n    [[0, 6, 0], [6, 6, 6], [0, 0, 0]],\n    [[7, 7, 0], [0, 7, 7], [0, 0, 0]]\n  ]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            LINES_PER_LEVEL\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ROWS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 20\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
